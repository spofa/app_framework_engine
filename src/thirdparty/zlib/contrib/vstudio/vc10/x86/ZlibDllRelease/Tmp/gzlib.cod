; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\yyh\Downloads\zlib-1.2.8\zlib-1.2.8\gzlib.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@		; `string'
PUBLIC	??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@		; `string'
EXTRN	_wcstombs:PROC
EXTRN	__wopen:PROC
EXTRN	_open:PROC
EXTRN	__lseeki64:PROC
EXTRN	__snprintf:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
;	COMDAT ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
CONST	SEGMENT
??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@ DB '%s%s%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
CONST	SEGMENT
??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@ DB 'out of memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
CONST	SEGMENT
??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@ DB '<fd:%d>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
PUBLIC	_gz_error
; Function compile flags: /Ogtp
; File c:\users\yyh\downloads\zlib-1.2.8\zlib-1.2.8\gzlib.c
;	COMDAT _gz_error
_TEXT	SEGMENT
tv175 = -4						; size = 4
_gz_error PROC						; COMDAT
; _state$ = ecx
; _err$ = eax
; _msg$ = ebx

; 579  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx
  00008	8b f8		 mov	 edi, eax

; 580  :     /* free previously allocated message and clear */
; 581  :     if (state->msg != NULL) {

  0000a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0000d	85 c0		 test	 eax, eax
  0000f	74 16		 je	 SHORT $LN13@gz_error

; 582  :         if (state->err != Z_MEM_ERROR)

  00011	83 7e 5c fc	 cmp	 DWORD PTR [esi+92], -4	; fffffffcH
  00015	74 09		 je	 SHORT $LN5@gz_error

; 583  :             free(state->msg);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 _free
  0001d	83 c4 04	 add	 esp, 4
$LN5@gz_error:

; 584  :         state->msg = NULL;

  00020	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
$LN13@gz_error:

; 585  :     }
; 586  : 
; 587  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 588  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00027	85 ff		 test	 edi, edi
  00029	74 0b		 je	 SHORT $LN4@gz_error
  0002b	83 ff fb	 cmp	 edi, -5			; fffffffbH
  0002e	74 06		 je	 SHORT $LN4@gz_error

; 589  :         state->x.have = 0;

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN4@gz_error:

; 590  : 
; 591  :     /* set error code, and if no message, then done */
; 592  :     state->err = err;

  00036	89 7e 5c	 mov	 DWORD PTR [esi+92], edi

; 593  :     if (msg == NULL)

  00039	85 db		 test	 ebx, ebx
  0003b	0f 84 88 00 00
	00		 je	 $LN7@gz_error

; 594  :         return;
; 595  : 
; 596  :     /* for an out of memory error, return literal string when requested */
; 597  :     if (err == Z_MEM_ERROR)

  00041	83 ff fc	 cmp	 edi, -4			; fffffffcH
  00044	0f 84 7f 00 00
	00		 je	 $LN7@gz_error

; 598  :         return;
; 599  : 
; 600  :     /* construct error message with path */
; 601  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==
; 602  :             NULL) {

  0004a	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0004d	89 45 fc	 mov	 DWORD PTR tv175[ebp], eax
  00050	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL9@gz_error:
  00053	8a 08		 mov	 cl, BYTE PTR [eax]
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f9		 jne	 SHORT $LL9@gz_error
  0005a	2b c2		 sub	 eax, edx
  0005c	8b d0		 mov	 edx, eax
  0005e	8b c3		 mov	 eax, ebx
  00060	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$LL10@gz_error:
  00063	8a 08		 mov	 cl, BYTE PTR [eax]
  00065	40		 inc	 eax
  00066	84 c9		 test	 cl, cl
  00068	75 f9		 jne	 SHORT $LL10@gz_error
  0006a	2b c7		 sub	 eax, edi
  0006c	8d 44 10 03	 lea	 eax, DWORD PTR [eax+edx+3]
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 _malloc
  00076	83 c4 04	 add	 esp, 4
  00079	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0007c	85 c0		 test	 eax, eax
  0007e	75 0d		 jne	 SHORT $LN1@gz_error

; 603  :         state->err = Z_MEM_ERROR;

  00080	5f		 pop	 edi
  00081	c7 46 5c fc ff
	ff ff		 mov	 DWORD PTR [esi+92], -4	; fffffffcH
  00088	5e		 pop	 esi

; 609  : #else
; 610  :     strcpy(state->msg, state->path);
; 611  :     strcat(state->msg, ": ");
; 612  :     strcat(state->msg, msg);
; 613  : #endif
; 614  :     return;
; 615  : }

  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
$LN1@gz_error:

; 604  :         return;
; 605  :     }
; 606  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 607  :     snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,
; 608  :              "%s%s%s", state->path, ": ", msg);

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR tv175[ebp]
  00090	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL11@gz_error:
  00093	8a 11		 mov	 dl, BYTE PTR [ecx]
  00095	41		 inc	 ecx
  00096	84 d2		 test	 dl, dl
  00098	75 f9		 jne	 SHORT $LL11@gz_error
  0009a	2b ce		 sub	 ecx, esi
  0009c	8b f1		 mov	 esi, ecx
  0009e	8b cb		 mov	 ecx, ebx
  000a0	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL12@gz_error:
  000a3	8a 11		 mov	 dl, BYTE PTR [ecx]
  000a5	41		 inc	 ecx
  000a6	84 d2		 test	 dl, dl
  000a8	75 f9		 jne	 SHORT $LL12@gz_error
  000aa	8b 55 fc	 mov	 edx, DWORD PTR tv175[ebp]
  000ad	53		 push	 ebx
  000ae	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5?$AA@
  000b3	52		 push	 edx
  000b4	2b cf		 sub	 ecx, edi
  000b6	68 00 00 00 00	 push	 OFFSET ??_C@_06DIJPEION@?$CFs?$CFs?$CFs?$AA@
  000bb	8d 4c 31 03	 lea	 ecx, DWORD PTR [ecx+esi+3]
  000bf	51		 push	 ecx
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 __snprintf
  000c6	83 c4 18	 add	 esp, 24			; 00000018H
$LN7@gz_error:
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi

; 609  : #else
; 610  :     strcpy(state->msg, state->path);
; 611  :     strcat(state->msg, ": ");
; 612  :     strcat(state->msg, msg);
; 613  : #endif
; 614  :     return;
; 615  : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
_gz_error ENDP
_TEXT	ENDS
PUBLIC	_gzclearerr@4
; Function compile flags: /Ogtp
;	COMDAT _gzclearerr@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclearerr@4 PROC					; COMDAT

; 551  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 552  :     gz_statep state;
; 553  : 
; 554  :     /* get internal structure and check integrity */
; 555  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	3b ca		 cmp	 ecx, edx
  0000a	74 29		 je	 SHORT $LN4@gzclearerr

; 556  :         return;
; 557  :     state = (gz_statep)file;
; 558  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000c	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000f	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00014	74 0e		 je	 SHORT $LN7@gzclearerr
  00016	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H
  0001b	75 18		 jne	 SHORT $LN4@gzclearerr

; 559  :         return;
; 560  : 
; 561  :     /* clear error and end-of-file */
; 562  :     if (state->mode == GZ_READ) {

  0001d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00022	75 06		 jne	 SHORT $LN1@gzclearerr
$LN7@gzclearerr:

; 563  :         state->eof = 0;

  00024	89 51 40	 mov	 DWORD PTR [ecx+64], edx

; 564  :         state->past = 0;

  00027	89 51 44	 mov	 DWORD PTR [ecx+68], edx
$LN1@gzclearerr:

; 565  :     }
; 566  :     gz_error(state, Z_OK, NULL);

  0002a	53		 push	 ebx
  0002b	33 db		 xor	 ebx, ebx
  0002d	33 c0		 xor	 eax, eax
  0002f	e8 00 00 00 00	 call	 _gz_error
  00034	5b		 pop	 ebx
$LN4@gzclearerr:

; 567  : }

  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
_gzclearerr@4 ENDP
_TEXT	ENDS
PUBLIC	_gzerror@8
; Function compile flags: /Ogtp
;	COMDAT _gzerror@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_errnum$ = 12						; size = 4
_gzerror@8 PROC						; COMDAT

; 531  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 532  :     gz_statep state;
; 533  : 
; 534  :     /* get internal structure and check integrity */
; 535  :     if (file == NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _file$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 06		 jne	 SHORT $LN3@gzerror
$LN10@gzerror:

; 536  :         return NULL;

  0000a	33 c0		 xor	 eax, eax

; 546  : }

  0000c	5d		 pop	 ebp
  0000d	c2 08 00	 ret	 8
$LN3@gzerror:

; 537  :     state = (gz_statep)file;
; 538  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00010	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00013	81 f9 4f 1c 00
	00		 cmp	 ecx, 7247		; 00001c4fH
  00019	74 08		 je	 SHORT $LN2@gzerror
  0001b	81 f9 b1 79 00
	00		 cmp	 ecx, 31153		; 000079b1H

; 539  :         return NULL;

  00021	75 e7		 jne	 SHORT $LN10@gzerror
$LN2@gzerror:

; 540  : 
; 541  :     /* return error information */
; 542  :     if (errnum != NULL)

  00023	8b 4d 0c	 mov	 ecx, DWORD PTR _errnum$[ebp]
  00026	85 c9		 test	 ecx, ecx
  00028	74 05		 je	 SHORT $LN1@gzerror

; 543  :         *errnum = state->err;

  0002a	8b 50 5c	 mov	 edx, DWORD PTR [eax+92]
  0002d	89 11		 mov	 DWORD PTR [ecx], edx
$LN1@gzerror:

; 544  :     return state->err == Z_MEM_ERROR ? "out of memory" :
; 545  :                                        (state->msg == NULL ? "" : state->msg);

  0002f	83 78 5c fc	 cmp	 DWORD PTR [eax+92], -4	; fffffffcH
  00033	75 09		 jne	 SHORT $LN8@gzerror
  00035	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@

; 546  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN8@gzerror:

; 544  :     return state->err == Z_MEM_ERROR ? "out of memory" :
; 545  :                                        (state->msg == NULL ? "" : state->msg);

  0003e	8b 40 60	 mov	 eax, DWORD PTR [eax+96]
  00041	85 c0		 test	 eax, eax
  00043	75 05		 jne	 SHORT $LN4@gzerror
  00045	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
$LN4@gzerror:

; 546  : }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
_gzerror@8 ENDP
_TEXT	ENDS
PUBLIC	_gzeof@4
; Function compile flags: /Ogtp
;	COMDAT _gzeof@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzeof@4 PROC						; COMDAT

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 514  :     gz_statep state;
; 515  : 
; 516  :     /* get internal structure and check integrity */
; 517  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx

; 518  :         return 0;

  00008	74 1f		 je	 SHORT $LN5@gzeof

; 519  :     state = (gz_statep)file;
; 520  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 0e		 je	 SHORT $LN8@gzeof
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H

; 521  :         return 0;

  00019	75 0e		 jne	 SHORT $LN5@gzeof

; 522  : 
; 523  :     /* return end-of-file state */
; 524  :     return state->mode == GZ_READ ? state->past : 0;

  0001b	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00020	75 07		 jne	 SHORT $LN5@gzeof
$LN8@gzeof:
  00022	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]

; 525  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
$LN5@gzeof:

; 522  : 
; 523  :     /* return end-of-file state */
; 524  :     return state->mode == GZ_READ ? state->past : 0;

  00029	33 c0		 xor	 eax, eax

; 525  : }

  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
_gzeof@4 ENDP
_TEXT	ENDS
PUBLIC	_gzoffset64@4
; Function compile flags: /Ogtp
;	COMDAT _gzoffset64@4
_TEXT	SEGMENT
_gzoffset64@4 PROC					; COMDAT
; _file$ = esi

; 481  :     z_off64_t offset;
; 482  :     gz_statep state;
; 483  : 
; 484  :     /* get internal structure and check integrity */
; 485  :     if (file == NULL)

  00000	85 f6		 test	 esi, esi
  00002	75 06		 jne	 SHORT $LN4@gzoffset64
$LN7@gzoffset64:

; 486  :         return -1;

  00004	83 c8 ff	 or	 eax, -1
  00007	0b d0		 or	 edx, eax

; 497  :     return offset;
; 498  : }

  00009	c3		 ret	 0
$LN4@gzoffset64:

; 487  :     state = (gz_statep)file;
; 488  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN3@gzoffset64
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H

; 489  :         return -1;

  00019	75 e9		 jne	 SHORT $LN7@gzoffset64
$LN3@gzoffset64:

; 490  : 
; 491  :     /* compute and return effective offset in file */
; 492  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  0001b	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001e	6a 01		 push	 1
  00020	6a 00		 push	 0
  00022	6a 00		 push	 0
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 __lseeki64

; 493  :     if (offset == -1)

  0002a	8b c8		 mov	 ecx, eax
  0002c	23 ca		 and	 ecx, edx
  0002e	83 c4 10	 add	 esp, 16			; 00000010H
  00031	83 f9 ff	 cmp	 ecx, -1

; 494  :         return -1;

  00034	74 ce		 je	 SHORT $LN7@gzoffset64

; 495  :     if (state->mode == GZ_READ)             /* reading */

  00036	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0003d	75 06		 jne	 SHORT $LN5@gzoffset64

; 496  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  0003f	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  00042	83 da 00	 sbb	 edx, 0
$LN5@gzoffset64:

; 497  :     return offset;
; 498  : }

  00045	c3		 ret	 0
_gzoffset64@4 ENDP
_TEXT	ENDS
PUBLIC	_gztell64@4
; Function compile flags: /Ogtp
;	COMDAT _gztell64@4
_TEXT	SEGMENT
_gztell64@4 PROC					; COMDAT
; _file$ = ecx

; 454  :     gz_statep state;
; 455  : 
; 456  :     /* get internal structure and check integrity */
; 457  :     if (file == NULL)

  00000	85 c9		 test	 ecx, ecx
  00002	75 06		 jne	 SHORT $LN2@gztell64
$LN7@gztell64:

; 458  :         return -1;

  00004	83 c8 ff	 or	 eax, -1
  00007	0b d0		 or	 edx, eax

; 465  : }

  00009	c3		 ret	 0
$LN2@gztell64:

; 459  :     state = (gz_statep)file;
; 460  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000a	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0000d	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00012	74 07		 je	 SHORT $LN1@gztell64
  00014	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H

; 461  :         return -1;

  00019	75 e9		 jne	 SHORT $LN7@gztell64
$LN1@gztell64:

; 462  : 
; 463  :     /* return position */
; 464  :     return state->x.pos + (state->seek ? state->skip : 0);

  0001b	83 79 58 00	 cmp	 DWORD PTR [ecx+88], 0
  0001f	56		 push	 esi
  00020	74 12		 je	 SHORT $LN5@gztell64
  00022	8b 51 50	 mov	 edx, DWORD PTR [ecx+80]
  00025	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00028	8b 71 54	 mov	 esi, DWORD PTR [ecx+84]
  0002b	03 c2		 add	 eax, edx
  0002d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00030	13 d6		 adc	 edx, esi
  00032	5e		 pop	 esi

; 465  : }

  00033	c3		 ret	 0
$LN5@gztell64:

; 462  : 
; 463  :     /* return position */
; 464  :     return state->x.pos + (state->seek ? state->skip : 0);

  00034	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00037	33 d2		 xor	 edx, edx
  00039	33 f6		 xor	 esi, esi
  0003b	03 c2		 add	 eax, edx
  0003d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00040	13 d6		 adc	 edx, esi
  00042	5e		 pop	 esi

; 465  : }

  00043	c3		 ret	 0
_gztell64@4 ENDP
_TEXT	ENDS
PUBLIC	_gzbuffer@8
; Function compile flags: /Ogtp
;	COMDAT _gzbuffer@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_size$ = 12						; size = 4
_gzbuffer@8 PROC					; COMDAT

; 317  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 318  :     gz_statep state;
; 319  : 
; 320  :     /* get internal structure and check integrity */
; 321  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 07		 jne	 SHORT $LN4@gzbuffer
$LN7@gzbuffer:

; 322  :         return -1;

  0000a	83 c8 ff	 or	 eax, -1

; 336  : }

  0000d	5d		 pop	 ebp
  0000e	c2 08 00	 ret	 8
$LN4@gzbuffer:

; 323  :     state = (gz_statep)file;
; 324  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00011	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00014	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  00019	74 07		 je	 SHORT $LN3@gzbuffer
  0001b	3d b1 79 00 00	 cmp	 eax, 31153		; 000079b1H

; 325  :         return -1;

  00020	75 e8		 jne	 SHORT $LN7@gzbuffer
$LN3@gzbuffer:

; 326  : 
; 327  :     /* make sure we haven't already allocated memory */
; 328  :     if (state->size != 0)

  00022	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0

; 329  :         return -1;

  00026	75 e2		 jne	 SHORT $LN7@gzbuffer

; 330  : 
; 331  :     /* check and set requested size */
; 332  :     if (size < 2)

  00028	8b 45 0c	 mov	 eax, DWORD PTR _size$[ebp]
  0002b	83 f8 02	 cmp	 eax, 2
  0002e	73 05		 jae	 SHORT $LN1@gzbuffer

; 333  :         size = 2;               /* need two bytes to check magic header */

  00030	b8 02 00 00 00	 mov	 eax, 2
$LN1@gzbuffer:

; 334  :     state->want = size;

  00035	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 335  :     return 0;

  00038	33 c0		 xor	 eax, eax

; 336  : }

  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
_gzbuffer@8 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_reset
_TEXT	SEGMENT
_gz_reset PROC						; COMDAT
; _state$ = esi

; 77   : {

  00000	53		 push	 ebx
  00001	57		 push	 edi

; 78   :     state->x.have = 0;              /* no output data available */

  00002	33 ff		 xor	 edi, edi

; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00004	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0000b	89 3e		 mov	 DWORD PTR [esi], edi
  0000d	75 09		 jne	 SHORT $LN1@gz_reset

; 80   :         state->eof = 0;             /* not at end of file */

  0000f	89 7e 40	 mov	 DWORD PTR [esi+64], edi

; 81   :         state->past = 0;            /* have not read past end yet */

  00012	89 7e 44	 mov	 DWORD PTR [esi+68], edi

; 82   :         state->how = LOOK;          /* look for gzip header */

  00015	89 7e 30	 mov	 DWORD PTR [esi+48], edi
$LN1@gz_reset:

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  00018	33 db		 xor	 ebx, ebx
  0001a	33 c0		 xor	 eax, eax
  0001c	8b ce		 mov	 ecx, esi
  0001e	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  00021	e8 00 00 00 00	 call	 _gz_error

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  00026	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00029	89 7e 0c	 mov	 DWORD PTR [esi+12], edi

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  0002c	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  0002f	5f		 pop	 edi
  00030	5b		 pop	 ebx

; 88   : }

  00031	c3		 ret	 0
_gz_reset ENDP
PUBLIC	_gzoffset@4
; Function compile flags: /Ogtp
;	COMDAT _gzoffset@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzoffset@4 PROC					; COMDAT

; 503  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 504  :     z_off64_t ret;
; 505  : 
; 506  :     ret = gzoffset64(file);

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	e8 00 00 00 00	 call	 _gzoffset64@4
  00010	8b c8		 mov	 ecx, eax
  00012	8b f2		 mov	 esi, edx

; 507  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00014	99		 cdq
  00015	3b c8		 cmp	 ecx, eax
  00017	75 0d		 jne	 SHORT $LN3@gzoffset
  00019	3b f2		 cmp	 esi, edx
  0001b	75 09		 jne	 SHORT $LN3@gzoffset
  0001d	8b c1		 mov	 eax, ecx

; 508  : }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
$LN3@gzoffset:

; 507  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00026	83 c8 ff	 or	 eax, -1

; 508  : }

  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
_gzoffset@4 ENDP
_TEXT	ENDS
PUBLIC	_gztell@4
; Function compile flags: /Ogtp
;	COMDAT _gztell@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gztell@4 PROC						; COMDAT

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  :     z_off64_t ret;
; 472  : 
; 473  :     ret = gztell64(file);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	56		 push	 esi
  00007	e8 00 00 00 00	 call	 _gztell64@4
  0000c	8b c8		 mov	 ecx, eax
  0000e	8b f2		 mov	 esi, edx

; 474  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	99		 cdq
  00011	3b c8		 cmp	 ecx, eax
  00013	75 0b		 jne	 SHORT $LN3@gztell
  00015	3b f2		 cmp	 esi, edx
  00017	75 07		 jne	 SHORT $LN3@gztell
  00019	8b c1		 mov	 eax, ecx
  0001b	5e		 pop	 esi

; 475  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
$LN3@gztell:

; 474  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00020	83 c8 ff	 or	 eax, -1
  00023	5e		 pop	 esi

; 475  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
_gztell@4 ENDP
_TEXT	ENDS
PUBLIC	_gzrewind@4
; Function compile flags: /Ogtp
;	COMDAT _gzrewind@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzrewind@4 PROC					; COMDAT

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi

; 342  :     gz_statep state;
; 343  : 
; 344  :     /* get internal structure */
; 345  :     if (file == NULL)

  00008	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  0000b	85 f6		 test	 esi, esi

; 346  :         return -1;

  0000d	74 40		 je	 SHORT $LN2@gzrewind

; 347  :     state = (gz_statep)file;
; 348  : 
; 349  :     /* check that we're reading and that there's no error */
; 350  :     if (state->mode != GZ_READ ||
; 351  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000f	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00016	75 37		 jne	 SHORT $LN2@gzrewind
  00018	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001b	85 c0		 test	 eax, eax
  0001d	74 05		 je	 SHORT $LN3@gzrewind
  0001f	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00022	75 2b		 jne	 SHORT $LN2@gzrewind
$LN3@gzrewind:

; 353  : 
; 354  :     /* back up and start over */
; 355  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00024	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00027	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0002d	6a 00		 push	 0
  0002f	50		 push	 eax
  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 __lseeki64
  00037	23 c2		 and	 eax, edx
  00039	83 c4 10	 add	 esp, 16			; 00000010H
  0003c	83 f8 ff	 cmp	 eax, -1

; 356  :         return -1;

  0003f	74 0e		 je	 SHORT $LN2@gzrewind

; 357  :     gz_reset(state);

  00041	e8 00 00 00 00	 call	 _gz_reset

; 358  :     return 0;

  00046	33 c0		 xor	 eax, eax

; 359  : }

  00048	5e		 pop	 esi
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
$LN2@gzrewind:

; 352  :         return -1;

  0004f	83 c8 ff	 or	 eax, -1

; 359  : }

  00052	5e		 pop	 esi
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
_gzrewind@4 ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _gz_open
_TEXT	SEGMENT
_exclusive$ = -8					; size = 4
tv149 = -4						; size = 4
_path$ = 8						; size = 4
_fd$ = 12						; size = 4
_gz_open PROC						; COMDAT
; _mode$ = eax

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 96   :     gz_statep state;
; 97   :     size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  00007	33 db		 xor	 ebx, ebx
  00009	57		 push	 edi
  0000a	8b f8		 mov	 edi, eax
  0000c	89 5d f8	 mov	 DWORD PTR _exclusive$[ebp], ebx

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  0000f	39 5d 08	 cmp	 DWORD PTR _path$[ebp], ebx
  00012	75 08		 jne	 SHORT $LN35@gz_open

; 108  :         return NULL;

  00014	5f		 pop	 edi
  00015	33 c0		 xor	 eax, eax
  00017	5b		 pop	 ebx

; 265  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN35@gz_open:
  0001c	56		 push	 esi

; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  0001d	68 a0 00 00 00	 push	 160			; 000000a0H
  00022	e8 00 00 00 00	 call	 _malloc
  00027	8b f0		 mov	 esi, eax
  00029	83 c4 04	 add	 esp, 4

; 112  :     if (state == NULL)

  0002c	3b f3		 cmp	 esi, ebx

; 113  :         return NULL;

  0002e	0f 84 da 01 00
	00		 je	 $LN52@gz_open

; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  00034	8a 07		 mov	 al, BYTE PTR [edi]
  00036	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00039	c7 46 20 00 20
	00 00		 mov	 DWORD PTR [esi+32], 8192 ; 00002000H
  00040	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  00043	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  00046	c7 46 48 ff ff
	ff ff		 mov	 DWORD PTR [esi+72], -1
  0004d	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx
  00050	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx
  00053	84 c0		 test	 al, al
  00055	0f 84 83 00 00
	00		 je	 $LN32@gz_open
  0005b	ba 03 00 00 00	 mov	 edx, 3
  00060	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL33@gz_open:

; 124  :         if (*mode >= '0' && *mode <= '9')

  00063	3c 30		 cmp	 al, 48			; 00000030H
  00065	7c 0f		 jl	 SHORT $LN31@gz_open
  00067	3c 39		 cmp	 al, 57			; 00000039H
  00069	7f 0b		 jg	 SHORT $LN31@gz_open

; 125  :             state->level = *mode - '0';

  0006b	0f be c0	 movsx	 eax, al
  0006e	83 e8 30	 sub	 eax, 48			; 00000030H
  00071	89 46 48	 mov	 DWORD PTR [esi+72], eax

; 126  :         else

  00074	eb 60		 jmp	 SHORT $LN48@gz_open
$LN31@gz_open:

; 127  :             switch (*mode) {

  00076	0f be c0	 movsx	 eax, al
  00079	83 c0 d5	 add	 eax, -43		; ffffffd5H
  0007c	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  0007f	77 55		 ja	 SHORT $LN48@gz_open
  00081	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN46@gz_open[eax]
  00088	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN54@gz_open[eax*4]
$LN27@gz_open:

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  0008f	c7 46 10 4f 1c
	00 00		 mov	 DWORD PTR [esi+16], 7247 ; 00001c4fH

; 130  :                 break;

  00096	eb 3e		 jmp	 SHORT $LN48@gz_open
$LN26@gz_open:

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  00098	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H

; 134  :                 break;

  0009f	eb 35		 jmp	 SHORT $LN48@gz_open
$LN25@gz_open:

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000a1	c7 46 10 01 00
	00 00		 mov	 DWORD PTR [esi+16], 1

; 137  :                 break;

  000a8	eb 2c		 jmp	 SHORT $LN48@gz_open
$LN22@gz_open:

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  000aa	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _exclusive$[ebp], 1

; 152  :                 break;

  000b1	eb 23		 jmp	 SHORT $LN48@gz_open
$LN21@gz_open:

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000b3	c7 46 4c 01 00
	00 00		 mov	 DWORD PTR [esi+76], 1

; 156  :                 break;

  000ba	eb 1a		 jmp	 SHORT $LN48@gz_open
$LN20@gz_open:

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  000bc	c7 46 4c 02 00
	00 00		 mov	 DWORD PTR [esi+76], 2

; 159  :                 break;

  000c3	eb 11		 jmp	 SHORT $LN48@gz_open
$LN19@gz_open:

; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000c5	89 56 4c	 mov	 DWORD PTR [esi+76], edx

; 162  :                 break;

  000c8	eb 0c		 jmp	 SHORT $LN48@gz_open
$LN18@gz_open:

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000ca	89 4e 4c	 mov	 DWORD PTR [esi+76], ecx

; 165  :                 break;

  000cd	eb 07		 jmp	 SHORT $LN48@gz_open
$LN17@gz_open:

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000cf	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN48@gz_open:

; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */
; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;
; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;
; 123  :     while (*mode) {

  000d6	8a 47 01	 mov	 al, BYTE PTR [edi+1]

; 168  :                 break;
; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;

  000d9	47		 inc	 edi
  000da	84 c0		 test	 al, al
  000dc	75 85		 jne	 SHORT $LL33@gz_open
$LN32@gz_open:

; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  000de	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000e1	3b c3		 cmp	 eax, ebx

; 177  :         free(state);
; 178  :         return NULL;

  000e3	74 5e		 je	 SHORT $LN53@gz_open

; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  000e5	3d 4f 1c 00 00	 cmp	 eax, 7247		; 00001c4fH
  000ea	75 0c		 jne	 SHORT $LN14@gz_open

; 183  :         if (state->direct) {

  000ec	39 5e 2c	 cmp	 DWORD PTR [esi+44], ebx

; 184  :             free(state);
; 185  :             return NULL;

  000ef	75 52		 jne	 SHORT $LN53@gz_open

; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  000f1	c7 46 2c 01 00
	00 00		 mov	 DWORD PTR [esi+44], 1
$LN14@gz_open:

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef _WIN32
; 192  :     if (fd == -2) {

  000f8	83 7d 0c fe	 cmp	 DWORD PTR _fd$[ebp], -2	; fffffffeH
  000fc	75 19		 jne	 SHORT $LN12@gz_open

; 193  :         len = wcstombs(NULL, path, 0);

  000fe	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00101	53		 push	 ebx
  00102	51		 push	 ecx
  00103	53		 push	 ebx
  00104	e8 00 00 00 00	 call	 _wcstombs
  00109	8b f8		 mov	 edi, eax
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 194  :         if (len == (size_t)-1)

  0010e	83 ff ff	 cmp	 edi, -1
  00111	75 18		 jne	 SHORT $LN10@gz_open

; 195  :             len = 0;

  00113	33 ff		 xor	 edi, edi

; 196  :     }
; 197  :     else

  00115	eb 14		 jmp	 SHORT $LN10@gz_open
$LN12@gz_open:

; 198  : #endif
; 199  :         len = strlen((const char *)path);

  00117	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  0011a	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0011d	8d 49 00	 npad	 3
$LL47@gz_open:
  00120	8a 08		 mov	 cl, BYTE PTR [eax]
  00122	40		 inc	 eax
  00123	84 c9		 test	 cl, cl
  00125	75 f9		 jne	 SHORT $LL47@gz_open
  00127	2b c2		 sub	 eax, edx
  00129	8b f8		 mov	 edi, eax
$LN10@gz_open:

; 200  :     state->path = (char *)malloc(len + 1);

  0012b	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  0012e	53		 push	 ebx
  0012f	e8 00 00 00 00	 call	 _malloc
  00134	8b d0		 mov	 edx, eax
  00136	83 c4 04	 add	 esp, 4
  00139	89 55 fc	 mov	 DWORD PTR tv149[ebp], edx
  0013c	89 56 18	 mov	 DWORD PTR [esi+24], edx

; 201  :     if (state->path == NULL) {

  0013f	85 d2		 test	 edx, edx
  00141	75 12		 jne	 SHORT $LN9@gz_open
$LN53@gz_open:

; 202  :         free(state);

  00143	56		 push	 esi
  00144	e8 00 00 00 00	 call	 _free
  00149	83 c4 04	 add	 esp, 4
  0014c	5e		 pop	 esi
  0014d	5f		 pop	 edi

; 203  :         return NULL;

  0014e	33 c0		 xor	 eax, eax
  00150	5b		 pop	 ebx

; 265  : }

  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN9@gz_open:

; 204  :     }
; 205  : #ifdef _WIN32
; 206  :     if (fd == -2)

  00155	83 7d 0c fe	 cmp	 DWORD PTR _fd$[ebp], -2	; fffffffeH
  00159	75 19		 jne	 SHORT $LN8@gz_open

; 207  :         if (len)

  0015b	85 ff		 test	 edi, edi
  0015d	74 10		 je	 SHORT $LN7@gz_open

; 208  :             wcstombs(state->path, path, len + 1);

  0015f	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00162	53		 push	 ebx
  00163	50		 push	 eax
  00164	52		 push	 edx
  00165	e8 00 00 00 00	 call	 _wcstombs
  0016a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 209  :         else

  0016d	eb 18		 jmp	 SHORT $LN50@gz_open
$LN7@gz_open:

; 210  :             *(state->path) = 0;

  0016f	c6 02 00	 mov	 BYTE PTR [edx], 0

; 211  :     else

  00172	eb 16		 jmp	 SHORT $LN5@gz_open
$LN8@gz_open:

; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         snprintf(state->path, len + 1, "%s", (const char *)path);

  00174	8b 4d 08	 mov	 ecx, DWORD PTR _path$[ebp]
  00177	51		 push	 ecx
  00178	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
  0017d	53		 push	 ebx
  0017e	52		 push	 edx
  0017f	e8 00 00 00 00	 call	 __snprintf
  00184	83 c4 10	 add	 esp, 16			; 00000010H
$LN50@gz_open:
  00187	8b 55 fc	 mov	 edx, DWORD PTR tv149[ebp]
$LN5@gz_open:

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =
; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));

  0018a	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0018d	81 ff 4f 1c 00
	00		 cmp	 edi, 7247		; 00001c4fH
  00193	75 04		 jne	 SHORT $LN38@gz_open
  00195	33 c0		 xor	 eax, eax
  00197	eb 28		 jmp	 SHORT $LN39@gz_open
$LN38@gz_open:
  00199	8b 4d f8	 mov	 ecx, DWORD PTR _exclusive$[ebp]
  0019c	8d 87 4f 86 ff
	ff		 lea	 eax, DWORD PTR [edi-31153]
  001a2	f7 d8		 neg	 eax
  001a4	1b c0		 sbb	 eax, eax
  001a6	25 08 fe ff ff	 and	 eax, -504		; fffffe08H
  001ab	05 00 02 00 00	 add	 eax, 512		; 00000200H
  001b0	f7 d9		 neg	 ecx
  001b2	1b c9		 sbb	 ecx, ecx
  001b4	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  001ba	0b c1		 or	 eax, ecx
  001bc	0d 01 01 00 00	 or	 eax, 257		; 00000101H
$LN39@gz_open:

; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (
; 242  : #ifdef _WIN32
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));

  001c1	8b 4d 0c	 mov	 ecx, DWORD PTR _fd$[ebp]
  001c4	0d 00 80 00 00	 or	 eax, 32768		; 00008000H
  001c9	83 f9 ff	 cmp	 ecx, -1
  001cc	7e 04		 jle	 SHORT $LN42@gz_open
  001ce	8b c1		 mov	 eax, ecx
  001d0	eb 25		 jmp	 SHORT $LN41@gz_open
$LN42@gz_open:
  001d2	68 b6 01 00 00	 push	 438			; 000001b6H
  001d7	50		 push	 eax
  001d8	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  001db	75 0b		 jne	 SHORT $LN40@gz_open
  001dd	8b 55 08	 mov	 edx, DWORD PTR _path$[ebp]
  001e0	52		 push	 edx
  001e1	e8 00 00 00 00	 call	 __wopen
  001e6	eb 09		 jmp	 SHORT $LN51@gz_open
$LN40@gz_open:
  001e8	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _open
$LN51@gz_open:
  001f1	8b 55 fc	 mov	 edx, DWORD PTR tv149[ebp]
  001f4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN41@gz_open:
  001f7	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 246  :     if (state->fd == -1) {

  001fa	83 f8 ff	 cmp	 eax, -1
  001fd	75 18		 jne	 SHORT $LN4@gz_open

; 247  :         free(state->path);

  001ff	52		 push	 edx
  00200	e8 00 00 00 00	 call	 _free

; 248  :         free(state);

  00205	56		 push	 esi
  00206	e8 00 00 00 00	 call	 _free
  0020b	83 c4 08	 add	 esp, 8
$LN52@gz_open:

; 249  :         return NULL;

  0020e	5e		 pop	 esi
  0020f	5f		 pop	 edi
  00210	33 c0		 xor	 eax, eax
  00212	5b		 pop	 ebx

; 265  : }

  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
$LN4@gz_open:

; 250  :     }
; 251  :     if (state->mode == GZ_APPEND)

  00217	83 ff 01	 cmp	 edi, 1
  0021a	75 07		 jne	 SHORT $LN3@gz_open

; 252  :         state->mode = GZ_WRITE;         /* simplify later checks */

  0021c	c7 46 10 b1 79
	00 00		 mov	 DWORD PTR [esi+16], 31153 ; 000079b1H
$LN3@gz_open:

; 253  : 
; 254  :     /* save the current position for rewinding (only if reading) */
; 255  :     if (state->mode == GZ_READ) {

  00223	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0022a	75 26		 jne	 SHORT $LN1@gz_open

; 256  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  0022c	6a 01		 push	 1
  0022e	6a 00		 push	 0
  00230	6a 00		 push	 0
  00232	50		 push	 eax
  00233	e8 00 00 00 00	 call	 __lseeki64

; 257  :         if (state->start == -1) state->start = 0;

  00238	8b c8		 mov	 ecx, eax
  0023a	23 ca		 and	 ecx, edx
  0023c	83 c4 10	 add	 esp, 16			; 00000010H
  0023f	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00242	89 56 3c	 mov	 DWORD PTR [esi+60], edx
  00245	83 f9 ff	 cmp	 ecx, -1
  00248	75 08		 jne	 SHORT $LN1@gz_open
  0024a	33 c0		 xor	 eax, eax
  0024c	89 46 38	 mov	 DWORD PTR [esi+56], eax
  0024f	89 46 3c	 mov	 DWORD PTR [esi+60], eax
$LN1@gz_open:

; 258  :     }
; 259  : 
; 260  :     /* initialize stream */
; 261  :     gz_reset(state);

  00252	e8 00 00 00 00	 call	 _gz_reset

; 262  : 
; 263  :     /* return stream */
; 264  :     return (gzFile)state;

  00257	8b c6		 mov	 eax, esi
  00259	5e		 pop	 esi
  0025a	5f		 pop	 edi
  0025b	5b		 pop	 ebx

; 265  : }

  0025c	8b e5		 mov	 esp, ebp
  0025e	5d		 pop	 ebp
  0025f	c3		 ret	 0
$LN54@gz_open:
  00260	00 00 00 00	 DD	 $LN53@gz_open
  00264	00 00 00 00	 DD	 $LN18@gz_open
  00268	00 00 00 00	 DD	 $LN19@gz_open
  0026c	00 00 00 00	 DD	 $LN17@gz_open
  00270	00 00 00 00	 DD	 $LN25@gz_open
  00274	00 00 00 00	 DD	 $LN21@gz_open
  00278	00 00 00 00	 DD	 $LN20@gz_open
  0027c	00 00 00 00	 DD	 $LN27@gz_open
  00280	00 00 00 00	 DD	 $LN26@gz_open
  00284	00 00 00 00	 DD	 $LN22@gz_open
  00288	00 00 00 00	 DD	 $LN48@gz_open
$LN46@gz_open:
  0028c	00		 DB	 0
  0028d	0a		 DB	 10			; 0000000aH
  0028e	0a		 DB	 10			; 0000000aH
  0028f	0a		 DB	 10			; 0000000aH
  00290	0a		 DB	 10			; 0000000aH
  00291	0a		 DB	 10			; 0000000aH
  00292	0a		 DB	 10			; 0000000aH
  00293	0a		 DB	 10			; 0000000aH
  00294	0a		 DB	 10			; 0000000aH
  00295	0a		 DB	 10			; 0000000aH
  00296	0a		 DB	 10			; 0000000aH
  00297	0a		 DB	 10			; 0000000aH
  00298	0a		 DB	 10			; 0000000aH
  00299	0a		 DB	 10			; 0000000aH
  0029a	0a		 DB	 10			; 0000000aH
  0029b	0a		 DB	 10			; 0000000aH
  0029c	0a		 DB	 10			; 0000000aH
  0029d	0a		 DB	 10			; 0000000aH
  0029e	0a		 DB	 10			; 0000000aH
  0029f	0a		 DB	 10			; 0000000aH
  002a0	0a		 DB	 10			; 0000000aH
  002a1	0a		 DB	 10			; 0000000aH
  002a2	0a		 DB	 10			; 0000000aH
  002a3	0a		 DB	 10			; 0000000aH
  002a4	0a		 DB	 10			; 0000000aH
  002a5	0a		 DB	 10			; 0000000aH
  002a6	0a		 DB	 10			; 0000000aH
  002a7	01		 DB	 1
  002a8	0a		 DB	 10			; 0000000aH
  002a9	0a		 DB	 10			; 0000000aH
  002aa	0a		 DB	 10			; 0000000aH
  002ab	0a		 DB	 10			; 0000000aH
  002ac	0a		 DB	 10			; 0000000aH
  002ad	0a		 DB	 10			; 0000000aH
  002ae	0a		 DB	 10			; 0000000aH
  002af	0a		 DB	 10			; 0000000aH
  002b0	0a		 DB	 10			; 0000000aH
  002b1	0a		 DB	 10			; 0000000aH
  002b2	0a		 DB	 10			; 0000000aH
  002b3	02		 DB	 2
  002b4	0a		 DB	 10			; 0000000aH
  002b5	03		 DB	 3
  002b6	0a		 DB	 10			; 0000000aH
  002b7	0a		 DB	 10			; 0000000aH
  002b8	0a		 DB	 10			; 0000000aH
  002b9	0a		 DB	 10			; 0000000aH
  002ba	0a		 DB	 10			; 0000000aH
  002bb	0a		 DB	 10			; 0000000aH
  002bc	0a		 DB	 10			; 0000000aH
  002bd	0a		 DB	 10			; 0000000aH
  002be	0a		 DB	 10			; 0000000aH
  002bf	0a		 DB	 10			; 0000000aH
  002c0	0a		 DB	 10			; 0000000aH
  002c1	0a		 DB	 10			; 0000000aH
  002c2	04		 DB	 4
  002c3	0a		 DB	 10			; 0000000aH
  002c4	0a		 DB	 10			; 0000000aH
  002c5	0a		 DB	 10			; 0000000aH
  002c6	0a		 DB	 10			; 0000000aH
  002c7	05		 DB	 5
  002c8	0a		 DB	 10			; 0000000aH
  002c9	06		 DB	 6
  002ca	0a		 DB	 10			; 0000000aH
  002cb	0a		 DB	 10			; 0000000aH
  002cc	0a		 DB	 10			; 0000000aH
  002cd	0a		 DB	 10			; 0000000aH
  002ce	0a		 DB	 10			; 0000000aH
  002cf	0a		 DB	 10			; 0000000aH
  002d0	0a		 DB	 10			; 0000000aH
  002d1	0a		 DB	 10			; 0000000aH
  002d2	0a		 DB	 10			; 0000000aH
  002d3	07		 DB	 7
  002d4	0a		 DB	 10			; 0000000aH
  002d5	0a		 DB	 10			; 0000000aH
  002d6	0a		 DB	 10			; 0000000aH
  002d7	0a		 DB	 10			; 0000000aH
  002d8	08		 DB	 8
  002d9	09		 DB	 9
_gz_open ENDP
PUBLIC	_gzseek64@16
; Function compile flags: /Ogtp
;	COMDAT _gzseek64@16
_TEXT	SEGMENT
tv405 = -8						; size = 8
_offset$ = 8						; size = 8
_gzseek64@16 PROC					; COMDAT
; _file$ = esi
; _whence$ = ecx

; 366  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi

; 367  :     unsigned n;
; 368  :     z_off64_t ret;
; 369  :     gz_statep state;
; 370  : 
; 371  :     /* get internal structure and check integrity */
; 372  :     if (file == NULL)

  00008	85 f6		 test	 esi, esi

; 373  :         return -1;

  0000a	74 28		 je	 SHORT $LN28@gzseek64

; 374  :     state = (gz_statep)file;
; 375  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  0000c	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  0000f	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  00015	74 08		 je	 SHORT $LN14@gzseek64
  00017	81 fa b1 79 00
	00		 cmp	 edx, 31153		; 000079b1H

; 376  :         return -1;

  0001d	75 15		 jne	 SHORT $LN28@gzseek64
$LN14@gzseek64:

; 377  : 
; 378  :     /* check that there's no error */
; 379  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  0001f	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00022	85 c0		 test	 eax, eax
  00024	74 05		 je	 SHORT $LN13@gzseek64
  00026	83 f8 fb	 cmp	 eax, -5			; fffffffbH

; 380  :         return -1;

  00029	75 09		 jne	 SHORT $LN28@gzseek64
$LN13@gzseek64:

; 381  : 
; 382  :     /* can only seek from start or relative to current position */
; 383  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  0002b	85 c9		 test	 ecx, ecx
  0002d	74 12		 je	 SHORT $LN20@gzseek64
  0002f	83 f9 01	 cmp	 ecx, 1
  00032	74 1e		 je	 SHORT $LN11@gzseek64
$LN28@gzseek64:

; 384  :         return -1;

  00034	83 c8 ff	 or	 eax, -1
  00037	0b d0		 or	 edx, eax

; 436  : }

  00039	5f		 pop	 edi
  0003a	5b		 pop	 ebx
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
$LN20@gzseek64:

; 385  : 
; 386  :     /* normalize offset to a SEEK_CUR specification */
; 387  :     if (whence == SEEK_SET)
; 388  :         offset -= state->x.pos;

  00041	8b 5d 08	 mov	 ebx, DWORD PTR _offset$[ebp]
  00044	2b 5e 08	 sub	 ebx, DWORD PTR [esi+8]
  00047	8b 7d 0c	 mov	 edi, DWORD PTR _offset$[ebp+4]
  0004a	1b 7e 0c	 sbb	 edi, DWORD PTR [esi+12]
  0004d	89 5d 08	 mov	 DWORD PTR _offset$[ebp], ebx
  00050	eb 15		 jmp	 SHORT $LN9@gzseek64
$LN11@gzseek64:

; 389  :     else if (state->seek)

  00052	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0

; 390  :         offset += state->skip;

  00056	8b 7d 0c	 mov	 edi, DWORD PTR _offset$[ebp+4]
  00059	74 09		 je	 SHORT $LN25@gzseek64
  0005b	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0005e	01 45 08	 add	 DWORD PTR _offset$[ebp], eax
  00061	13 7e 54	 adc	 edi, DWORD PTR [esi+84]
$LN25@gzseek64:
  00064	8b 5d 08	 mov	 ebx, DWORD PTR _offset$[ebp]
$LN9@gzseek64:

; 391  :     state->seek = 0;

  00067	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0

; 392  : 
; 393  :     /* if within raw area while reading, just go there */
; 394  :     if (state->mode == GZ_READ && state->how == COPY &&
; 395  :             state->x.pos + offset >= 0) {

  0006e	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH
  00074	75 6a		 jne	 SHORT $LN8@gzseek64
  00076	83 7e 30 01	 cmp	 DWORD PTR [esi+48], 1
  0007a	75 64		 jne	 SHORT $LN8@gzseek64
  0007c	8b c3		 mov	 eax, ebx
  0007e	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00081	8b cf		 mov	 ecx, edi
  00083	13 4e 0c	 adc	 ecx, DWORD PTR [esi+12]
  00086	89 4d fc	 mov	 DWORD PTR tv405[ebp+4], ecx
  00089	78 55		 js	 SHORT $LN8@gzseek64
  0008b	7f 04		 jg	 SHORT $LN21@gzseek64
  0008d	85 c0		 test	 eax, eax
  0008f	72 4f		 jb	 SHORT $LN8@gzseek64
$LN21@gzseek64:

; 396  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00091	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 397  :         if (ret == -1)

  00094	33 c0		 xor	 eax, eax
  00096	2b 1e		 sub	 ebx, DWORD PTR [esi]
  00098	6a 01		 push	 1
  0009a	8b cf		 mov	 ecx, edi
  0009c	1b c8		 sbb	 ecx, eax
  0009e	51		 push	 ecx
  0009f	53		 push	 ebx
  000a0	52		 push	 edx
  000a1	e8 00 00 00 00	 call	 __lseeki64
  000a6	23 c2		 and	 eax, edx
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
  000ab	83 f8 ff	 cmp	 eax, -1

; 398  :             return -1;

  000ae	74 84		 je	 SHORT $LN28@gzseek64

; 399  :         state->x.have = 0;

  000b0	33 c0		 xor	 eax, eax

; 400  :         state->eof = 0;
; 401  :         state->past = 0;
; 402  :         state->seek = 0;
; 403  :         gz_error(state, Z_OK, NULL);

  000b2	33 db		 xor	 ebx, ebx
  000b4	8b ce		 mov	 ecx, esi
  000b6	89 06		 mov	 DWORD PTR [esi], eax
  000b8	89 46 40	 mov	 DWORD PTR [esi+64], eax
  000bb	89 46 44	 mov	 DWORD PTR [esi+68], eax
  000be	89 46 58	 mov	 DWORD PTR [esi+88], eax
  000c1	e8 00 00 00 00	 call	 _gz_error

; 404  :         state->strm.avail_in = 0;
; 405  :         state->x.pos += offset;

  000c6	8b 45 08	 mov	 eax, DWORD PTR _offset$[ebp]
  000c9	01 46 08	 add	 DWORD PTR [esi+8], eax

; 406  :         return state->x.pos;

  000cc	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000cf	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  000d2	11 7e 0c	 adc	 DWORD PTR [esi+12], edi
  000d5	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]

; 436  : }

  000d8	5f		 pop	 edi
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 08 00	 ret	 8
$LN8@gzseek64:

; 407  :     }
; 408  : 
; 409  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 410  :     if (offset < 0) {

  000e0	85 ff		 test	 edi, edi
  000e2	7f 39		 jg	 SHORT $LN3@gzseek64
  000e4	7c 04		 jl	 SHORT $LN22@gzseek64
  000e6	85 db		 test	 ebx, ebx
  000e8	73 33		 jae	 SHORT $LN3@gzseek64
$LN22@gzseek64:

; 411  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  000ea	81 fa 4f 1c 00
	00		 cmp	 edx, 7247		; 00001c4fH

; 412  :             return -1;

  000f0	0f 85 3e ff ff
	ff		 jne	 $LN28@gzseek64

; 413  :         offset += state->x.pos;

  000f6	03 5e 08	 add	 ebx, DWORD PTR [esi+8]
  000f9	13 7e 0c	 adc	 edi, DWORD PTR [esi+12]

; 414  :         if (offset < 0)                     /* before start of file! */

  000fc	85 ff		 test	 edi, edi
  000fe	7f 0e		 jg	 SHORT $LN4@gzseek64
  00100	0f 8c 2e ff ff
	ff		 jl	 $LN28@gzseek64
  00106	85 db		 test	 ebx, ebx

; 415  :             return -1;

  00108	0f 82 26 ff ff
	ff		 jb	 $LN28@gzseek64
$LN4@gzseek64:

; 416  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  0010e	56		 push	 esi
  0010f	e8 00 00 00 00	 call	 _gzrewind@4
  00114	83 f8 ff	 cmp	 eax, -1

; 417  :             return -1;

  00117	0f 84 17 ff ff
	ff		 je	 $LN28@gzseek64
$LN3@gzseek64:

; 418  :     }
; 419  : 
; 420  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 421  :     if (state->mode == GZ_READ) {

  0011d	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00124	75 27		 jne	 SHORT $LN2@gzseek64

; 422  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?
; 423  :             (unsigned)offset : state->x.have;

  00126	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00128	33 c0		 xor	 eax, eax
  0012a	3b c7		 cmp	 eax, edi
  0012c	7f 0a		 jg	 SHORT $LN18@gzseek64
  0012e	7c 04		 jl	 SHORT $LN24@gzseek64
  00130	3b cb		 cmp	 ecx, ebx
  00132	77 04		 ja	 SHORT $LN18@gzseek64
$LN24@gzseek64:
  00134	8b c1		 mov	 eax, ecx
  00136	eb 02		 jmp	 SHORT $LN19@gzseek64
$LN18@gzseek64:
  00138	8b c3		 mov	 eax, ebx
$LN19@gzseek64:

; 424  :         state->x.have -= n;
; 425  :         state->x.next += n;

  0013a	01 46 04	 add	 DWORD PTR [esi+4], eax
  0013d	2b c8		 sub	 ecx, eax
  0013f	89 0e		 mov	 DWORD PTR [esi], ecx

; 426  :         state->x.pos += n;

  00141	33 c9		 xor	 ecx, ecx
  00143	01 46 08	 add	 DWORD PTR [esi+8], eax
  00146	11 4e 0c	 adc	 DWORD PTR [esi+12], ecx

; 427  :         offset -= n;

  00149	2b d8		 sub	 ebx, eax
  0014b	1b f9		 sbb	 edi, ecx
$LN2@gzseek64:

; 428  :     }
; 429  : 
; 430  :     /* request skip (if not zero) */
; 431  :     if (offset) {

  0014d	8b c3		 mov	 eax, ebx
  0014f	0b c7		 or	 eax, edi
  00151	74 0d		 je	 SHORT $LN1@gzseek64

; 432  :         state->seek = 1;

  00153	c7 46 58 01 00
	00 00		 mov	 DWORD PTR [esi+88], 1

; 433  :         state->skip = offset;

  0015a	89 5e 50	 mov	 DWORD PTR [esi+80], ebx
  0015d	89 7e 54	 mov	 DWORD PTR [esi+84], edi
$LN1@gzseek64:

; 434  :     }
; 435  :     return state->x.pos + offset;

  00160	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00163	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00166	03 c3		 add	 eax, ebx
  00168	13 d7		 adc	 edx, edi

; 436  : }

  0016a	5f		 pop	 edi
  0016b	5b		 pop	 ebx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c2 08 00	 ret	 8
_gzseek64@16 ENDP
_TEXT	ENDS
PUBLIC	_gzopen_w@8
; Function compile flags: /Ogtp
;	COMDAT _gzopen_w@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen_w@8 PROC					; COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 309  :     return gz_open(path, -2, mode);

  00003	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00006	6a fe		 push	 -2			; fffffffeH
  00008	50		 push	 eax
  00009	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 08	 add	 esp, 8

; 310  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen_w@8 ENDP
_TEXT	ENDS
PUBLIC	_gzdopen@8
; Function compile flags: /Ogtp
;	COMDAT _gzdopen@8
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzdopen@8 PROC						; COMDAT

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 288  :     char *path;         /* identifier for error messages */
; 289  :     gzFile gz;
; 290  : 
; 291  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00005	8b 7d 08	 mov	 edi, DWORD PTR _fd$[ebp]
  00008	83 ff ff	 cmp	 edi, -1
  0000b	74 3b		 je	 SHORT $LN1@gzdopen
  0000d	6a 13		 push	 19			; 00000013H
  0000f	e8 00 00 00 00	 call	 _malloc
  00014	8b f0		 mov	 esi, eax
  00016	83 c4 04	 add	 esp, 4
  00019	85 f6		 test	 esi, esi
  0001b	74 2b		 je	 SHORT $LN1@gzdopen

; 293  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 294  :     snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd); /* for debugging */

  0001d	57		 push	 edi
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO?$AA@
  00023	6a 13		 push	 19			; 00000013H
  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 __snprintf

; 295  : #else
; 296  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 297  : #endif
; 298  :     gz = gz_open(path, fd, mode);

  0002b	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0002e	57		 push	 edi
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 _gz_open

; 299  :     free(path);

  00035	56		 push	 esi
  00036	8b f8		 mov	 edi, eax
  00038	e8 00 00 00 00	 call	 _free
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 300  :     return gz;

  00040	8b c7		 mov	 eax, edi
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 301  : }

  00044	5d		 pop	 ebp
  00045	c2 08 00	 ret	 8
$LN1@gzdopen:
  00048	5f		 pop	 edi

; 292  :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	5e		 pop	 esi

; 301  : }

  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
_gzdopen@8 ENDP
_TEXT	ENDS
PUBLIC	_gzopen@8
; Function compile flags: /Ogtp
;	COMDAT _gzopen@8
_TEXT	SEGMENT
_path$ = 8						; size = 4
_mode$ = 12						; size = 4
_gzopen@8 PROC						; COMDAT

; 271  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 272  :     return gz_open(path, -1, mode);

  00003	8b 45 08	 mov	 eax, DWORD PTR _path$[ebp]
  00006	6a ff		 push	 -1
  00008	50		 push	 eax
  00009	8b 45 0c	 mov	 eax, DWORD PTR _mode$[ebp]
  0000c	e8 00 00 00 00	 call	 _gz_open
  00011	83 c4 08	 add	 esp, 8

; 273  : }

  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
_gzopen@8 ENDP
PUBLIC	_gzseek@12
; Function compile flags: /Ogtp
;	COMDAT _gzseek@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_offset$ = 12						; size = 4
_whence$ = 16						; size = 4
_gzseek@12 PROC						; COMDAT

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 444  :     z_off64_t ret;
; 445  : 
; 446  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00007	8b 45 0c	 mov	 eax, DWORD PTR _offset$[ebp]
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR _whence$[ebp]
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00011	99		 cdq
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 _gzseek64@16
  00019	8b c8		 mov	 ecx, eax
  0001b	8b f2		 mov	 esi, edx

; 447  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0001d	99		 cdq
  0001e	3b c8		 cmp	 ecx, eax
  00020	75 0d		 jne	 SHORT $LN3@gzseek
  00022	3b f2		 cmp	 esi, edx
  00024	75 09		 jne	 SHORT $LN3@gzseek
  00026	8b c1		 mov	 eax, ecx

; 448  : }

  00028	5e		 pop	 esi
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
$LN3@gzseek:

; 447  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0002f	83 c8 ff	 or	 eax, -1

; 448  : }

  00032	5e		 pop	 esi
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 0c 00	 ret	 12			; 0000000cH
_gzseek@12 ENDP
END
