; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\yyh\Downloads\zlib-1.2.8\zlib-1.2.8\contrib\minizip\ioapi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	_ftell:PROC
EXTRN	_fseek:PROC
EXTRN	_fread:PROC
EXTRN	_fwrite:PROC
EXTRN	__ftelli64:PROC
EXTRN	__fseeki64:PROC
EXTRN	_fclose:PROC
EXTRN	_ferror:PROC
EXTRN	_fopen:PROC
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb?$AA@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb?$AA@ DB 'r+b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Ogtp
; File c:\users\yyh\downloads\zlib-1.2.8\zlib-1.2.8\contrib\minizip\ioapi.c
;	COMDAT _ferror_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ferror_file_func PROC					; COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 219  :     int ret;
; 220  :     ret = ferror((FILE *)stream);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _ferror
  0000c	83 c4 04	 add	 esp, 4

; 221  :     return ret;
; 222  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_ferror_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fclose_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_fclose_file_func PROC					; COMDAT

; 211  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 212  :     int ret;
; 213  :     ret = fclose((FILE *)stream);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _fclose
  0000c	83 c4 04	 add	 esp, 4

; 214  :     return ret;
; 215  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_fclose_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fseek64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_fseek64_file_func PROC					; COMDAT

; 185  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 186  :     int fseek_origin=0;
; 187  :     long ret;
; 188  :     switch (origin)

  00003	8b 45 18	 mov	 eax, DWORD PTR _origin$[ebp]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 19		 je	 SHORT $LN3@fseek64_fi
  0000b	48		 dec	 eax
  0000c	74 0f		 je	 SHORT $LN5@fseek64_fi
  0000e	48		 dec	 eax
  0000f	74 05		 je	 SHORT $LN4@fseek64_fi

; 198  :         break;
; 199  :     default: return -1;

  00011	83 c8 ff	 or	 eax, -1

; 207  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN4@fseek64_fi:

; 193  :     case ZLIB_FILEFUNC_SEEK_END :
; 194  :         fseek_origin = SEEK_END;

  00016	b8 02 00 00 00	 mov	 eax, 2

; 195  :         break;

  0001b	eb 09		 jmp	 SHORT $LN6@fseek64_fi
$LN5@fseek64_fi:

; 189  :     {
; 190  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 191  :         fseek_origin = SEEK_CUR;

  0001d	b8 01 00 00 00	 mov	 eax, 1

; 192  :         break;

  00022	eb 02		 jmp	 SHORT $LN6@fseek64_fi
$LN3@fseek64_fi:

; 196  :     case ZLIB_FILEFUNC_SEEK_SET :
; 197  :         fseek_origin = SEEK_SET;

  00024	33 c0		 xor	 eax, eax
$LN6@fseek64_fi:

; 200  :     }
; 201  :     ret = 0;
; 202  : 
; 203  :     if(FSEEKO_FUNC((FILE *)stream, offset, fseek_origin) != 0)

  00026	8b 4d 10	 mov	 ecx, DWORD PTR _offset$[ebp]
  00029	8b 55 0c	 mov	 edx, DWORD PTR _stream$[ebp]
  0002c	56		 push	 esi
  0002d	50		 push	 eax
  0002e	8b 45 14	 mov	 eax, DWORD PTR _offset$[ebp+4]
  00031	50		 push	 eax
  00032	51		 push	 ecx
  00033	52		 push	 edx
  00034	33 f6		 xor	 esi, esi
  00036	e8 00 00 00 00	 call	 __fseeki64
  0003b	83 c4 10	 add	 esp, 16			; 00000010H
  0003e	85 c0		 test	 eax, eax
  00040	74 03		 je	 SHORT $LN1@fseek64_fi

; 204  :                         ret = -1;

  00042	83 ce ff	 or	 esi, -1
$LN1@fseek64_fi:

; 205  : 
; 206  :     return ret;

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 207  : }

  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
_fseek64_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fseek_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_fseek_file_func PROC					; COMDAT

; 162  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 163  :     int fseek_origin=0;
; 164  :     long ret;
; 165  :     switch (origin)

  00003	8b 45 14	 mov	 eax, DWORD PTR _origin$[ebp]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 19		 je	 SHORT $LN3@fseek_file
  0000b	48		 dec	 eax
  0000c	74 0f		 je	 SHORT $LN5@fseek_file
  0000e	48		 dec	 eax
  0000f	74 05		 je	 SHORT $LN4@fseek_file

; 175  :         break;
; 176  :     default: return -1;

  00011	83 c8 ff	 or	 eax, -1

; 182  : }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
$LN4@fseek_file:

; 170  :     case ZLIB_FILEFUNC_SEEK_END :
; 171  :         fseek_origin = SEEK_END;

  00016	b8 02 00 00 00	 mov	 eax, 2

; 172  :         break;

  0001b	eb 09		 jmp	 SHORT $LN6@fseek_file
$LN5@fseek_file:

; 166  :     {
; 167  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 168  :         fseek_origin = SEEK_CUR;

  0001d	b8 01 00 00 00	 mov	 eax, 1

; 169  :         break;

  00022	eb 02		 jmp	 SHORT $LN6@fseek_file
$LN3@fseek_file:

; 173  :     case ZLIB_FILEFUNC_SEEK_SET :
; 174  :         fseek_origin = SEEK_SET;

  00024	33 c0		 xor	 eax, eax
$LN6@fseek_file:

; 177  :     }
; 178  :     ret = 0;
; 179  :     if (fseek((FILE *)stream, offset, fseek_origin) != 0)

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _stream$[ebp]
  00029	56		 push	 esi
  0002a	50		 push	 eax
  0002b	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0002e	50		 push	 eax
  0002f	51		 push	 ecx
  00030	33 f6		 xor	 esi, esi
  00032	e8 00 00 00 00	 call	 _fseek
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	85 c0		 test	 eax, eax
  0003c	74 03		 je	 SHORT $LN1@fseek_file

; 180  :         ret = -1;

  0003e	83 ce ff	 or	 esi, -1
$LN1@fseek_file:

; 181  :     return ret;

  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi

; 182  : }

  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_fseek_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _ftell64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell64_file_func PROC					; COMDAT

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 156  :     ZPOS64_T ret;
; 157  :     ret = FTELLO_FUNC((FILE *)stream);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 __ftelli64
  0000c	83 c4 04	 add	 esp, 4

; 158  :     return ret;
; 159  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_ftell64_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _ftell_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell_file_func PROC					; COMDAT

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 148  :     long ret;
; 149  :     ret = ftell((FILE *)stream);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _ftell
  0000c	83 c4 04	 add	 esp, 4

; 150  :     return ret;
; 151  : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
_ftell_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fwrite_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fwrite_file_func PROC					; COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  :     uLong ret;
; 142  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	6a 01		 push	 1
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _fwrite
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 143  :     return ret;
; 144  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_fwrite_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fread_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fread_file_func PROC					; COMDAT

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 134  :     uLong ret;
; 135  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00003	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00006	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  00009	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	6a 01		 push	 1
  00010	52		 push	 edx
  00011	e8 00 00 00 00	 call	 _fread
  00016	83 c4 10	 add	 esp, 16			; 00000010H

; 136  :     return ret;
; 137  : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_fread_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fopen64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen64_file_func PROC					; COMDAT

; 114  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  :     FILE* file = NULL;
; 116  :     const char* mode_fopen = NULL;
; 117  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	24 03		 and	 al, 3
  0000b	33 f6		 xor	 esi, esi
  0000d	33 c9		 xor	 ecx, ecx
  0000f	3c 01		 cmp	 al, 1
  00011	75 07		 jne	 SHORT $LN6@fopen64_fi

; 118  :         mode_fopen = "rb";

  00013	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02JDPG@rb?$AA@

; 119  :     else

  00018	eb 16		 jmp	 SHORT $LN2@fopen64_fi
$LN6@fopen64_fi:

; 120  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0001a	f6 c2 04	 test	 dl, 4
  0001d	74 07		 je	 SHORT $LN4@fopen64_fi

; 121  :         mode_fopen = "r+b";

  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@

; 122  :     else

  00024	eb 0a		 jmp	 SHORT $LN2@fopen64_fi
$LN4@fopen64_fi:

; 123  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00026	f6 c2 08	 test	 dl, 8
  00029	74 05		 je	 SHORT $LN2@fopen64_fi

; 124  :         mode_fopen = "wb";

  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02GMLFBBN@wb?$AA@
$LN2@fopen64_fi:

; 125  : 
; 126  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00030	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00033	85 d2		 test	 edx, edx
  00035	74 11		 je	 SHORT $LN10@fopen64_fi
  00037	85 c9		 test	 ecx, ecx
  00039	74 0d		 je	 SHORT $LN10@fopen64_fi

; 127  :         file = FOPEN_FUNC((const char*)filename, mode_fopen);

  0003b	51		 push	 ecx
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _fopen
  00042	83 c4 08	 add	 esp, 8
  00045	5e		 pop	 esi

; 129  : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN10@fopen64_fi:

; 128  :     return file;

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 129  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_fopen64_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _fopen_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen_file_func PROC					; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   :     FILE* file = NULL;
; 98   :     const char* mode_fopen = NULL;
; 99   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	24 03		 and	 al, 3
  0000b	33 f6		 xor	 esi, esi
  0000d	33 c9		 xor	 ecx, ecx
  0000f	3c 01		 cmp	 al, 1
  00011	75 07		 jne	 SHORT $LN6@fopen_file

; 100  :         mode_fopen = "rb";

  00013	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02JDPG@rb?$AA@

; 101  :     else

  00018	eb 16		 jmp	 SHORT $LN2@fopen_file
$LN6@fopen_file:

; 102  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0001a	f6 c2 04	 test	 dl, 4
  0001d	74 07		 je	 SHORT $LN4@fopen_file

; 103  :         mode_fopen = "r+b";

  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@

; 104  :     else

  00024	eb 0a		 jmp	 SHORT $LN2@fopen_file
$LN4@fopen_file:

; 105  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00026	f6 c2 08	 test	 dl, 8
  00029	74 05		 je	 SHORT $LN2@fopen_file

; 106  :         mode_fopen = "wb";

  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_02GMLFBBN@wb?$AA@
$LN2@fopen_file:

; 107  : 
; 108  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00030	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00033	85 d2		 test	 edx, edx
  00035	74 11		 je	 SHORT $LN10@fopen_file
  00037	85 c9		 test	 ecx, ecx
  00039	74 0d		 je	 SHORT $LN10@fopen_file

; 109  :         file = fopen(filename, mode_fopen);

  0003b	51		 push	 ecx
  0003c	52		 push	 edx
  0003d	e8 00 00 00 00	 call	 _fopen
  00042	83 c4 08	 add	 esp, 8
  00045	5e		 pop	 esi

; 111  : }

  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
$LN10@fopen_file:

; 110  :     return file;

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi

; 111  : }

  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
_fopen_file_func ENDP
_TEXT	ENDS
PUBLIC	_fill_zlib_filefunc64_32_def_from_filefunc32
; Function compile flags: /Ogtp
;	COMDAT _fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
_fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT
; _p_filefunc64_32$ = eax
; _p_filefunc32$ = ecx

; 71   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;

  00000	33 d2		 xor	 edx, edx
  00002	89 10		 mov	 DWORD PTR [eax], edx

; 72   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;
; 73   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;
; 74   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;
; 75   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;
; 76   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;

  00004	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 77   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;

  00007	89 50 10	 mov	 DWORD PTR [eax+16], edx

; 78   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  0000a	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0000d	56		 push	 esi
  0000e	8b 31		 mov	 esi, DWORD PTR [ecx]
  00010	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 79   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00013	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00016	89 70 20	 mov	 DWORD PTR [eax+32], esi
  00019	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001c	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 80   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  0001f	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00022	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00025	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00028	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 81   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  0002b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 82   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  0002e	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00031	89 70 08	 mov	 DWORD PTR [eax+8], esi
  00034	89 50 28	 mov	 DWORD PTR [eax+40], edx
  00037	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  0003a	5e		 pop	 esi

; 83   : }

  0003b	c3		 ret	 0
_fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
PUBLIC	_call_ztell64
; Function compile flags: /Ogtp
;	COMDAT _call_ztell64
_TEXT	SEGMENT
_call_ztell64 PROC					; COMDAT
; _pfilefunc$ = eax
; _filestream$ = ecx

; 57   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00000	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0

; 58   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  00004	51		 push	 ecx
  00005	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00008	51		 push	 ecx
  00009	74 09		 je	 SHORT $LN4@call_ztell
  0000b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0000e	ff d2		 call	 edx
  00010	83 c4 08	 add	 esp, 8

; 66   :     }
; 67   : }

  00013	c3		 ret	 0
$LN4@call_ztell:

; 59   :     else
; 60   :     {
; 61   :         uLong tell_uLong = (*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  00014	8b 50 24	 mov	 edx, DWORD PTR [eax+36]
  00017	ff d2		 call	 edx
  00019	83 c4 08	 add	 esp, 8

; 62   :         if ((tell_uLong) == MAXU32)

  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	75 06		 jne	 SHORT $LN2@call_ztell

; 63   :             return (ZPOS64_T)-1;

  00021	0b c0		 or	 eax, eax
  00023	83 ca ff	 or	 edx, -1

; 66   :     }
; 67   : }

  00026	c3		 ret	 0
$LN2@call_ztell:

; 64   :         else
; 65   :             return tell_uLong;

  00027	33 d2		 xor	 edx, edx

; 66   :     }
; 67   : }

  00029	c3		 ret	 0
_call_ztell64 ENDP
_TEXT	ENDS
PUBLIC	_call_zseek64
; Function compile flags: /Ogtp
;	COMDAT _call_zseek64
_TEXT	SEGMENT
_offset$ = 8						; size = 8
_call_zseek64 PROC					; COMDAT
; _pfilefunc$ = eax
; _filestream$ = esi
; _origin$ = edx

; 42   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx

; 43   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00007	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000a	57		 push	 edi
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 18		 je	 SHORT $LN4@call_zseek

; 44   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  0000f	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00012	52		 push	 edx
  00013	8b 55 0c	 mov	 edx, DWORD PTR _offset$[ebp+4]
  00016	52		 push	 edx
  00017	8b 55 08	 mov	 edx, DWORD PTR _offset$[ebp]
  0001a	52		 push	 edx
  0001b	56		 push	 esi
  0001c	50		 push	 eax
  0001d	ff d1		 call	 ecx
  0001f	83 c4 14	 add	 esp, 20			; 00000014H

; 52   :     }
; 53   : }

  00022	5f		 pop	 edi
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN4@call_zseek:

; 45   :     else
; 46   :     {
; 47   :         uLong offsetTruncated = (uLong)offset;
; 48   :         if (offsetTruncated != offset)

  00027	8b 4d 08	 mov	 ecx, DWORD PTR _offset$[ebp]
  0002a	33 ff		 xor	 edi, edi
  0002c	3b c9		 cmp	 ecx, ecx
  0002e	75 05		 jne	 SHORT $LN7@call_zseek
  00030	3b 7d 0c	 cmp	 edi, DWORD PTR _offset$[ebp+4]
  00033	74 08		 je	 SHORT $LN2@call_zseek
$LN7@call_zseek:

; 49   :             return -1;

  00035	83 c8 ff	 or	 eax, -1

; 52   :     }
; 53   : }

  00038	5f		 pop	 edi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
$LN2@call_zseek:

; 50   :         else
; 51   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  0003d	52		 push	 edx
  0003e	8b 50 28	 mov	 edx, DWORD PTR [eax+40]
  00041	51		 push	 ecx
  00042	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00045	56		 push	 esi
  00046	51		 push	 ecx
  00047	ff d2		 call	 edx
  00049	83 c4 10	 add	 esp, 16			; 00000010H

; 52   :     }
; 53   : }

  0004c	5f		 pop	 edi
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_call_zseek64 ENDP
_TEXT	ENDS
PUBLIC	_call_zopen64
; Function compile flags: /Ogtp
;	COMDAT _call_zopen64
_TEXT	SEGMENT
_call_zopen64 PROC					; COMDAT
; _pfilefunc$ = eax
; _filename$ = esi
; _mode$ = edx

; 33   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)

  00000	8b 08		 mov	 ecx, DWORD PTR [eax]

; 34   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  00002	52		 push	 edx
  00003	56		 push	 esi
  00004	85 c9		 test	 ecx, ecx
  00006	74 0a		 je	 SHORT $LN2@call_zopen
  00008	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  0000b	50		 push	 eax
  0000c	ff d1		 call	 ecx

; 35   :     else
; 36   :     {
; 37   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   :     }
; 39   : }

  00011	c3		 ret	 0
$LN2@call_zopen:

; 35   :     else
; 36   :     {
; 37   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  00012	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00015	8b 50 20	 mov	 edx, DWORD PTR [eax+32]
  00018	51		 push	 ecx
  00019	ff d2		 call	 edx
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 38   :     }
; 39   : }

  0001e	c3		 ret	 0
_call_zopen64 ENDP
PUBLIC	_fill_fopen64_filefunc
; Function compile flags: /Ogtp
;	COMDAT _fill_fopen64_filefunc
_TEXT	SEGMENT
_fill_fopen64_filefunc PROC				; COMDAT
; _pzlib_filefunc_def$ = eax

; 239  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  00000	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _fopen64_file_func

; 240  :     pzlib_filefunc_def->zread_file = fread_file_func;

  00006	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _fread_file_func

; 241  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  0000d	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _fwrite_file_func

; 242  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;

  00014	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _ftell64_file_func

; 243  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;

  0001b	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _fseek64_file_func

; 244  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00022	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _fclose_file_func

; 245  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  00029	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _ferror_file_func

; 246  :     pzlib_filefunc_def->opaque = NULL;

  00030	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 247  : }

  00037	c3		 ret	 0
_fill_fopen64_filefunc ENDP
END
