; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Users\yyh\Downloads\zlib-1.2.8\zlib-1.2.8\contrib\minizip\iowin32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__CreateFileA@28:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetFilePointer@16:PROC
EXTRN	__imp__CloseHandle@4:PROC
PUBLIC	_win32_error_file_func
; Function compile flags: /Ogtp
; File c:\users\yyh\downloads\zlib-1.2.8\zlib-1.2.8\contrib\minizip\iowin32.c
;	COMDAT _win32_error_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_error_file_func PROC				; COMDAT

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 405  :     int ret=-1;
; 406  :     if (stream!=NULL)

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _stream$[ebp]
  00006	83 c8 ff	 or	 eax, -1
  00009	85 c9		 test	 ecx, ecx
  0000b	74 03		 je	 SHORT $LN1@win32_erro

; 407  :     {
; 408  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;
; 409  :     }
; 410  :     return ret;

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
$LN1@win32_erro:

; 411  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_close_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_close_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_close_file_func PROC				; COMDAT

; 386  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 387  :     int ret=-1;
; 388  : 
; 389  :     if (stream!=NULL)

  00005	8b 7d 0c	 mov	 edi, DWORD PTR _stream$[ebp]
  00008	83 ce ff	 or	 esi, -1
  0000b	85 ff		 test	 edi, edi
  0000d	74 18		 je	 SHORT $LN5@win32_clos

; 390  :     {
; 391  :         HANDLE hFile;
; 392  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0000f	8b 07		 mov	 eax, DWORD PTR [edi]

; 393  :         if (hFile != NULL)

  00011	85 c0		 test	 eax, eax
  00013	74 09		 je	 SHORT $LN1@win32_clos

; 394  :         {
; 395  :             CloseHandle(hFile);

  00015	50		 push	 eax
  00016	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 396  :             ret=0;

  0001c	33 f6		 xor	 esi, esi
$LN1@win32_clos:

; 397  :         }
; 398  :         free(stream);

  0001e	57		 push	 edi
  0001f	e8 00 00 00 00	 call	 _free
  00024	83 c4 04	 add	 esp, 4
$LN5@win32_clos:

; 399  :     }
; 400  :     return ret;

  00027	5f		 pop	 edi
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi

; 401  : }

  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
_win32_close_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _MySetFilePointerEx
_TEXT	SEGMENT
_lHigh$ = -4						; size = 4
_hFile$ = 8						; size = 4
_pos$ = 12						; size = 8
_MySetFilePointerEx PROC				; COMDAT
; _newPos$ = ebx

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 242  : #ifdef IOWIN32_USING_WINRT_API
; 243  :     return SetFilePointerEx(hFile, pos, newPos, dwMoveMethod);
; 244  : #else
; 245  :     LONG lHigh = pos.HighPart;

  00004	8b 45 10	 mov	 eax, DWORD PTR _pos$[ebp+4]

; 246  :     DWORD dwNewPos = SetFilePointer(hFile, pos.LowPart, &lHigh, FILE_CURRENT);

  00007	8b 55 0c	 mov	 edx, DWORD PTR _pos$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 01		 push	 1
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR _lHigh$[ebp]
  00011	51		 push	 ecx
  00012	89 45 fc	 mov	 DWORD PTR _lHigh$[ebp], eax
  00015	8b 45 08	 mov	 eax, DWORD PTR _hFile$[ebp]
  00018	52		 push	 edx
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetFilePointer@16
  00020	8b f8		 mov	 edi, eax

; 247  :     BOOL fOk = TRUE;

  00022	be 01 00 00 00	 mov	 esi, 1

; 248  :     if (dwNewPos == 0xFFFFFFFF)

  00027	83 ff ff	 cmp	 edi, -1
  0002a	75 0c		 jne	 SHORT $LN8@MySetFileP

; 249  :         if (GetLastError() != NO_ERROR)

  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00032	85 c0		 test	 eax, eax
  00034	74 02		 je	 SHORT $LN8@MySetFileP

; 250  :             fOk = FALSE;

  00036	33 f6		 xor	 esi, esi
$LN8@MySetFileP:

; 255  :     }
; 256  :     return fOk;

  00038	8b c6		 mov	 eax, esi
  0003a	85 db		 test	 ebx, ebx
  0003c	74 0c		 je	 SHORT $LN1@MySetFileP

; 251  :     if ((newPos != NULL) && (fOk))

  0003e	85 f6		 test	 esi, esi
  00040	74 08		 je	 SHORT $LN1@MySetFileP

; 252  :     {
; 253  :         newPos->LowPart = dwNewPos;
; 254  :         newPos->HighPart = lHigh;

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _lHigh$[ebp]
  00045	89 3b		 mov	 DWORD PTR [ebx], edi
  00047	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN1@MySetFileP:
  0004a	5f		 pop	 edi
  0004b	5e		 pop	 esi

; 257  : #endif
; 258  : }

  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_MySetFilePointerEx ENDP
_TEXT	ENDS
PUBLIC	_win32_write_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_write_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_write_file_func PROC				; COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 221  :     uLong ret=0;
; 222  :     HANDLE hFile = NULL;
; 223  :     if (stream!=NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
  0000d	85 f6		 test	 esi, esi
  0000f	74 31		 je	 SHORT $LN2@win32_writ

; 224  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 225  : 
; 226  :     if (hFile != NULL)

  00013	85 c9		 test	 ecx, ecx
  00015	74 2b		 je	 SHORT $LN2@win32_writ

; 227  :     {
; 228  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00017	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _ret$[ebp]
  0001e	50		 push	 eax
  0001f	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WriteFile@20
  0002b	85 c0		 test	 eax, eax
  0002d	75 10		 jne	 SHORT $LN7@win32_writ

; 229  :         {
; 230  :             DWORD dwErr = GetLastError();

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 231  :             if (dwErr == ERROR_HANDLE_EOF)

  00035	83 f8 26	 cmp	 eax, 38			; 00000026H
  00038	75 02		 jne	 SHORT $LN1@win32_writ

; 232  :                 dwErr = 0;

  0003a	33 c0		 xor	 eax, eax
$LN1@win32_writ:

; 233  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@win32_writ:

; 234  :         }
; 235  :     }
; 236  : 
; 237  :     return ret;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN2@win32_writ:
  00042	5e		 pop	 esi

; 238  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_read_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_read_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_win32_read_file_func PROC				; COMDAT

; 198  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 199  :     uLong ret=0;
; 200  :     HANDLE hFile = NULL;
; 201  :     if (stream!=NULL)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00008	33 c0		 xor	 eax, eax
  0000a	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax
  0000d	85 f6		 test	 esi, esi
  0000f	74 31		 je	 SHORT $LN2@win32_read

; 202  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 203  : 
; 204  :     if (hFile != NULL)

  00013	85 c9		 test	 ecx, ecx
  00015	74 2b		 je	 SHORT $LN2@win32_read

; 205  :     {
; 206  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00017	8b 55 14	 mov	 edx, DWORD PTR _size$[ebp]
  0001a	50		 push	 eax
  0001b	8d 45 fc	 lea	 eax, DWORD PTR _ret$[ebp]
  0001e	50		 push	 eax
  0001f	8b 45 10	 mov	 eax, DWORD PTR _buf$[ebp]
  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReadFile@20
  0002b	85 c0		 test	 eax, eax
  0002d	75 10		 jne	 SHORT $LN7@win32_read

; 207  :         {
; 208  :             DWORD dwErr = GetLastError();

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 209  :             if (dwErr == ERROR_HANDLE_EOF)

  00035	83 f8 26	 cmp	 eax, 38			; 00000026H
  00038	75 02		 jne	 SHORT $LN1@win32_read

; 210  :                 dwErr = 0;

  0003a	33 c0		 xor	 eax, eax
$LN1@win32_read:

; 211  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN7@win32_read:

; 212  :         }
; 213  :     }
; 214  : 
; 215  :     return ret;

  0003f	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]
$LN2@win32_read:
  00042	5e		 pop	 esi

; 216  : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_win32_read_file_func ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _win32_build_iowin
_TEXT	SEGMENT
_win32_build_iowin PROC					; COMDAT
; _hFile$ = edi

; 78   :     voidpf ret=NULL;

  00000	33 c0		 xor	 eax, eax

; 79   : 
; 80   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  00002	85 ff		 test	 edi, edi
  00004	74 2c		 je	 SHORT $LN1@win32_buil
  00006	83 ff ff	 cmp	 edi, -1
  00009	74 27		 je	 SHORT $LN1@win32_buil

; 81   :     {
; 82   :         WIN32FILE_IOWIN w32fiow;
; 83   :         w32fiow.hf = hFile;
; 84   :         w32fiow.error = 0;
; 85   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	6a 08		 push	 8
  0000f	33 db		 xor	 ebx, ebx
  00011	e8 00 00 00 00	 call	 _malloc
  00016	8b f0		 mov	 esi, eax
  00018	83 c4 04	 add	 esp, 4

; 86   : 
; 87   :         if (ret==NULL)

  0001b	85 f6		 test	 esi, esi
  0001d	75 0c		 jne	 SHORT $LN2@win32_buil

; 88   :             CloseHandle(hFile);

  0001f	57		 push	 edi
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 91   :     }
; 92   :     return ret;

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 93   : }

  0002a	c3		 ret	 0
$LN2@win32_buil:

; 89   :         else
; 90   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0002b	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0002e	89 3e		 mov	 DWORD PTR [esi], edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
$LN1@win32_buil:

; 93   : }

  00032	c3		 ret	 0
_win32_build_iowin ENDP
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT _win32_translate_open_mode
_TEXT	SEGMENT
_lpdwFlagsAndAttributes$ = 8				; size = 4
_win32_translate_open_mode PROC				; COMDAT
; _mode$ = edx
; _lpdwDesiredAccess$ = ecx
; _lpdwCreationDisposition$ = eax
; _lpdwShareMode$ = esi

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 56   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _lpdwFlagsAndAttributes$[ebp]

; 57   : 
; 58   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00008	8b da		 mov	 ebx, edx
  0000a	80 e3 03	 and	 bl, 3
  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	5f		 pop	 edi
  00014	80 fb 01	 cmp	 bl, 1
  00017	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00023	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00029	5b		 pop	 ebx
  0002a	75 14		 jne	 SHORT $LN5@win32_tran

; 59   :     {
; 60   :         *lpdwDesiredAccess = GENERIC_READ;

  0002c	c7 01 00 00 00
	80		 mov	 DWORD PTR [ecx], -2147483648 ; 80000000H

; 61   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00032	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 62   :         *lpdwShareMode = FILE_SHARE_READ;

  00038	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1

; 73   :     }
; 74   : }

  0003e	5d		 pop	 ebp
  0003f	c3		 ret	 0
$LN5@win32_tran:

; 63   :     }
; 64   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00040	f6 c2 04	 test	 dl, 4
  00043	74 0e		 je	 SHORT $LN3@win32_tran

; 65   :     {
; 66   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;
; 67   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00045	c7 00 03 00 00
	00		 mov	 DWORD PTR [eax], 3

; 70   :     {
; 71   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  0004b	c7 01 00 00 00
	c0		 mov	 DWORD PTR [ecx], -1073741824 ; c0000000H

; 73   :     }
; 74   : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN3@win32_tran:

; 68   :     }
; 69   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00053	f6 c2 08	 test	 dl, 8
  00056	74 0c		 je	 SHORT $LN1@win32_tran

; 72   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  00058	c7 00 02 00 00
	00		 mov	 DWORD PTR [eax], 2
  0005e	c7 01 00 00 00
	c0		 mov	 DWORD PTR [ecx], -1073741824 ; c0000000H
$LN1@win32_tran:

; 73   :     }
; 74   : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
_win32_translate_open_mode ENDP
PUBLIC	_win32_seek64_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_seek64_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_win32_seek64_file_func PROC				; COMDAT

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 348  :     DWORD dwMoveMethod=0xFFFFFFFF;
; 349  :     HANDLE hFile = NULL;
; 350  :     long ret=-1;
; 351  : 
; 352  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	83 c8 ff	 or	 eax, -1
  0000c	85 f6		 test	 esi, esi
  0000e	74 02		 je	 SHORT $LN10@win32_seek

; 353  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00010	8b 16		 mov	 edx, DWORD PTR [esi]
$LN10@win32_seek:

; 354  : 
; 355  :     switch (origin)

  00012	8b 4d 18	 mov	 ecx, DWORD PTR _origin$[ebp]
  00015	83 e9 00	 sub	 ecx, 0
  00018	74 06		 je	 SHORT $LN6@win32_seek
  0001a	49		 dec	 ecx
  0001b	74 03		 je	 SHORT $LN6@win32_seek
  0001d	49		 dec	 ecx

; 356  :     {
; 357  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 358  :             dwMoveMethod = FILE_CURRENT;
; 359  :             break;
; 360  :         case ZLIB_FILEFUNC_SEEK_END :
; 361  :             dwMoveMethod = FILE_END;
; 362  :             break;
; 363  :         case ZLIB_FILEFUNC_SEEK_SET :
; 364  :             dwMoveMethod = FILE_BEGIN;
; 365  :             break;
; 366  :         default: return -1;

  0001e	75 26		 jne	 SHORT $LN13@win32_seek
$LN6@win32_seek:

; 367  :     }
; 368  : 
; 369  :     if (hFile)

  00020	85 d2		 test	 edx, edx
  00022	74 2a		 je	 SHORT $LN11@win32_seek

; 370  :     {
; 371  :         LARGE_INTEGER pos;
; 372  :         pos.QuadPart = offset;
; 373  :         if (!MySetFilePointerEx(hFile, pos, NULL, FILE_CURRENT))

  00024	8b 45 14	 mov	 eax, DWORD PTR _offset$[ebp+4]
  00027	8b 4d 10	 mov	 ecx, DWORD PTR _offset$[ebp]
  0002a	53		 push	 ebx
  0002b	50		 push	 eax
  0002c	51		 push	 ecx
  0002d	52		 push	 edx
  0002e	33 db		 xor	 ebx, ebx
  00030	e8 00 00 00 00	 call	 _MySetFilePointerEx
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	5b		 pop	 ebx
  00039	85 c0		 test	 eax, eax
  0003b	75 0f		 jne	 SHORT $LN2@win32_seek

; 374  :         {
; 375  :             DWORD dwErr = GetLastError();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 376  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN13@win32_seek:

; 377  :             ret = -1;

  00046	83 c8 ff	 or	 eax, -1
  00049	5e		 pop	 esi

; 381  :     }
; 382  :     return ret;
; 383  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN2@win32_seek:

; 378  :         }
; 379  :         else
; 380  :             ret=0;

  0004c	33 c0		 xor	 eax, eax
$LN11@win32_seek:
  0004e	5e		 pop	 esi

; 381  :     }
; 382  :     return ret;
; 383  : }

  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
_win32_seek64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_seek_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_seek_file_func
_TEXT	SEGMENT
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_win32_seek_file_func PROC				; COMDAT

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 310  :     DWORD dwMoveMethod=0xFFFFFFFF;
; 311  :     HANDLE hFile = NULL;
; 312  : 
; 313  :     long ret=-1;
; 314  :     if (stream!=NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  00007	33 d2		 xor	 edx, edx
  00009	83 c8 ff	 or	 eax, -1
  0000c	85 f6		 test	 esi, esi
  0000e	74 02		 je	 SHORT $LN10@win32_seek@2

; 315  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00010	8b 16		 mov	 edx, DWORD PTR [esi]
$LN10@win32_seek@2:

; 316  :     switch (origin)

  00012	8b 4d 14	 mov	 ecx, DWORD PTR _origin$[ebp]
  00015	83 e9 00	 sub	 ecx, 0
  00018	74 06		 je	 SHORT $LN6@win32_seek@2
  0001a	49		 dec	 ecx
  0001b	74 03		 je	 SHORT $LN6@win32_seek@2
  0001d	49		 dec	 ecx

; 317  :     {
; 318  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 319  :         dwMoveMethod = FILE_CURRENT;
; 320  :         break;
; 321  :     case ZLIB_FILEFUNC_SEEK_END :
; 322  :         dwMoveMethod = FILE_END;
; 323  :         break;
; 324  :     case ZLIB_FILEFUNC_SEEK_SET :
; 325  :         dwMoveMethod = FILE_BEGIN;
; 326  :         break;
; 327  :     default: return -1;

  0001e	75 25		 jne	 SHORT $LN13@win32_seek@2
$LN6@win32_seek@2:

; 328  :     }
; 329  : 
; 330  :     if (hFile != NULL)

  00020	85 d2		 test	 edx, edx
  00022	74 29		 je	 SHORT $LN11@win32_seek@2

; 331  :     {
; 332  :         LARGE_INTEGER pos;
; 333  :         pos.QuadPart = offset;

  00024	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00027	53		 push	 ebx
  00028	33 c9		 xor	 ecx, ecx

; 334  :         if (!MySetFilePointerEx(hFile, pos, NULL, dwMoveMethod))

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	52		 push	 edx
  0002d	33 db		 xor	 ebx, ebx
  0002f	e8 00 00 00 00	 call	 _MySetFilePointerEx
  00034	83 c4 0c	 add	 esp, 12			; 0000000cH
  00037	5b		 pop	 ebx
  00038	85 c0		 test	 eax, eax
  0003a	75 0f		 jne	 SHORT $LN2@win32_seek@2

; 335  :         {
; 336  :             DWORD dwErr = GetLastError();

  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 337  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00042	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN13@win32_seek@2:

; 338  :             ret = -1;

  00045	83 c8 ff	 or	 eax, -1
  00048	5e		 pop	 esi

; 342  :     }
; 343  :     return ret;
; 344  : }

  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
$LN2@win32_seek@2:

; 339  :         }
; 340  :         else
; 341  :             ret=0;

  0004b	33 c0		 xor	 eax, eax
$LN11@win32_seek@2:
  0004d	5e		 pop	 esi

; 342  :     }
; 343  :     return ret;
; 344  : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
_win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell64_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_tell64_file_func
_TEXT	SEGMENT
_pos$82230 = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell64_file_func PROC				; COMDAT

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 285  :     ZPOS64_T ret= (ZPOS64_T)-1;
; 286  :     HANDLE hFile = NULL;
; 287  :     if (stream!=NULL)

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  0000e	83 c8 ff	 or	 eax, -1
  00011	83 ca ff	 or	 edx, -1
  00014	85 f6		 test	 esi, esi
  00016	74 42		 je	 SHORT $LN1@win32_tell

; 288  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00018	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 289  : 
; 290  :     if (hFile)

  0001a	85 c9		 test	 ecx, ecx
  0001c	74 3c		 je	 SHORT $LN1@win32_tell

; 291  :     {
; 292  :         LARGE_INTEGER pos;
; 293  :         pos.QuadPart = 0;

  0001e	33 d2		 xor	 edx, edx
  00020	33 c0		 xor	 eax, eax

; 294  : 
; 295  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  00022	52		 push	 edx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	8d 5c 24 14	 lea	 ebx, DWORD PTR _pos$82230[esp+28]
  00029	89 44 24 14	 mov	 DWORD PTR _pos$82230[esp+28], eax
  0002d	89 54 24 18	 mov	 DWORD PTR _pos$82230[esp+32], edx
  00031	e8 00 00 00 00	 call	 _MySetFilePointerEx
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH
  00039	85 c0		 test	 eax, eax
  0003b	75 15		 jne	 SHORT $LN2@win32_tell

; 296  :         {
; 297  :             DWORD dwErr = GetLastError();

  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 298  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 299  :             ret = (ZPOS64_T)-1;

  00046	83 c8 ff	 or	 eax, -1
  00049	83 ca ff	 or	 edx, -1

; 303  :     }
; 304  :     return ret;
; 305  : }

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN2@win32_tell:

; 300  :         }
; 301  :         else
; 302  :             ret=pos.QuadPart;

  00052	8b 44 24 08	 mov	 eax, DWORD PTR _pos$82230[esp+16]
  00056	8b 54 24 0c	 mov	 edx, DWORD PTR _pos$82230[esp+20]
$LN1@win32_tell:

; 303  :     }
; 304  :     return ret;
; 305  : }

  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_win32_tell64_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_tell_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_tell_file_func
_TEXT	SEGMENT
_pos$82210 = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_win32_tell_file_func PROC				; COMDAT

; 261  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 262  :     long ret=-1;
; 263  :     HANDLE hFile = NULL;
; 264  :     if (stream!=NULL)

  00007	8b 75 0c	 mov	 esi, DWORD PTR _stream$[ebp]
  0000a	83 c8 ff	 or	 eax, -1
  0000d	85 f6		 test	 esi, esi
  0000f	74 35		 je	 SHORT $LN1@win32_tell@2

; 265  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00011	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 266  :     if (hFile != NULL)

  00013	85 c9		 test	 ecx, ecx
  00015	74 2f		 je	 SHORT $LN1@win32_tell@2

; 267  :     {
; 268  :         LARGE_INTEGER pos;
; 269  :         pos.QuadPart = 0;

  00017	53		 push	 ebx
  00018	33 d2		 xor	 edx, edx
  0001a	33 c0		 xor	 eax, eax

; 270  : 
; 271  :         if (!MySetFilePointerEx(hFile, pos, &pos, FILE_CURRENT))

  0001c	52		 push	 edx
  0001d	50		 push	 eax
  0001e	51		 push	 ecx
  0001f	8d 5d f8	 lea	 ebx, DWORD PTR _pos$82210[ebp]
  00022	89 45 f8	 mov	 DWORD PTR _pos$82210[ebp], eax
  00025	e8 00 00 00 00	 call	 _MySetFilePointerEx
  0002a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002d	5b		 pop	 ebx
  0002e	85 c0		 test	 eax, eax
  00030	75 11		 jne	 SHORT $LN2@win32_tell@2

; 272  :         {
; 273  :             DWORD dwErr = GetLastError();

  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0

; 274  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00038	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 275  :             ret = -1;

  0003b	83 c8 ff	 or	 eax, -1
  0003e	5e		 pop	 esi

; 281  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN2@win32_tell@2:

; 276  :         }
; 277  :         else
; 278  :             ret=(long)pos.LowPart;
; 279  :     }
; 280  :     return ret;

  00043	8b 45 f8	 mov	 eax, DWORD PTR _pos$82210[ebp]
$LN1@win32_tell@2:
  00046	5e		 pop	 esi

; 281  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
_win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_open_file_func
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open_file_func PROC				; COMDAT

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  :     const char* mode_fopen = NULL;
; 171  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 172  :     HANDLE hFile = NULL;
; 173  : 
; 174  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 175  : 
; 176  : #ifdef IOWIN32_USING_WINRT_API
; 177  : #ifdef UNICODE
; 178  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 179  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 180  : #else
; 181  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 182  :     {
; 183  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 184  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 185  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 186  :     }
; 187  : #endif
; 188  : #else
; 189  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open

; 190  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open:

; 191  : #endif
; 192  : 
; 193  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 194  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open_file_func ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcW
; Function compile flags: /Ogtp
;	COMDAT _win32_open64_file_funcW
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcW PROC				; COMDAT

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 150  :     const char* mode_fopen = NULL;
; 151  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 152  :     HANDLE hFile = NULL;
; 153  : 
; 154  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 155  : 
; 156  : #ifdef IOWIN32_USING_WINRT_API
; 157  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 158  :         hFile = CreateFile2((LPCWSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition,NULL);
; 159  : #else
; 160  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open@2
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open@2

; 161  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileW@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open@2:

; 162  : #endif
; 163  : 
; 164  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 165  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open64_file_funcW ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_funcA
; Function compile flags: /Ogtp
;	COMDAT _win32_open64_file_funcA
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_funcA PROC				; COMDAT

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 126  :     const char* mode_fopen = NULL;
; 127  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 128  :     HANDLE hFile = NULL;
; 129  : 
; 130  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 131  : 
; 132  : #ifdef IOWIN32_USING_WINRT_API
; 133  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 134  :     {
; 135  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 136  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 137  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 138  :     }
; 139  : #else
; 140  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open@3
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open@3

; 141  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open@3:

; 142  : #endif
; 143  : 
; 144  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 145  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open64_file_funcA ENDP
_TEXT	ENDS
PUBLIC	_win32_open64_file_func
; Function compile flags: /Ogtp
;	COMDAT _win32_open64_file_func
_TEXT	SEGMENT
_dwShareMode$ = -16					; size = 4
_dwCreationDisposition$ = -12				; size = 4
_dwFlagsAndAttributes$ = -8				; size = 4
_dwDesiredAccess$ = -4					; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_win32_open64_file_func PROC				; COMDAT

; 96   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 97   :     const char* mode_fopen = NULL;
; 98   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 99   :     HANDLE hFile = NULL;
; 100  : 
; 101  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00003	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  00006	83 ec 10	 sub	 esp, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d 45 f8	 lea	 eax, DWORD PTR _dwFlagsAndAttributes$[ebp]
  0000e	50		 push	 eax
  0000f	8d 75 f0	 lea	 esi, DWORD PTR _dwShareMode$[ebp]
  00012	8d 45 f4	 lea	 eax, DWORD PTR _dwCreationDisposition$[ebp]
  00015	8d 4d fc	 lea	 ecx, DWORD PTR _dwDesiredAccess$[ebp]
  00018	33 ff		 xor	 edi, edi
  0001a	e8 00 00 00 00	 call	 _win32_translate_open_mode

; 102  : 
; 103  : #ifdef IOWIN32_USING_WINRT_API
; 104  : #ifdef UNICODE
; 105  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 106  :         hFile = CreateFile2((LPCTSTR)filename, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 107  : #else
; 108  :     if ((filename!=NULL) && (dwDesiredAccess != 0))
; 109  :     {
; 110  :         WCHAR filenameW[FILENAME_MAX + 0x200 + 1];
; 111  :         MultiByteToWideChar(CP_ACP,0,(const char*)filename,-1,filenameW,FILENAME_MAX + 0x200);
; 112  :         hFile = CreateFile2(filenameW, dwDesiredAccess, dwShareMode, dwCreationDisposition, NULL);
; 113  :     }
; 114  : #endif
; 115  : #else
; 116  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	85 c9		 test	 ecx, ecx
  00027	74 1f		 je	 SHORT $LN1@win32_open@4
  00029	8b 45 fc	 mov	 eax, DWORD PTR _dwDesiredAccess$[ebp]
  0002c	85 c0		 test	 eax, eax
  0002e	74 18		 je	 SHORT $LN1@win32_open@4

; 117  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  00030	8b 55 f8	 mov	 edx, DWORD PTR _dwFlagsAndAttributes$[ebp]
  00033	57		 push	 edi
  00034	52		 push	 edx
  00035	8b 55 f4	 mov	 edx, DWORD PTR _dwCreationDisposition$[ebp]
  00038	52		 push	 edx
  00039	8b 55 f0	 mov	 edx, DWORD PTR _dwShareMode$[ebp]
  0003c	57		 push	 edi
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateFileA@28
  00046	8b f8		 mov	 edi, eax
$LN1@win32_open@4:

; 118  : #endif
; 119  : 
; 120  :     return win32_build_iowin(hFile);

  00048	e8 00 00 00 00	 call	 _win32_build_iowin
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 121  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_win32_open64_file_func ENDP
PUBLIC	_fill_win32_filefunc64W
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc64W
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64W PROC				; COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 453  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcW

; 454  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 455  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 456  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 457  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 458  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 459  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 460  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 461  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64W ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64A
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc64A
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64A PROC				; COMDAT

; 439  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 440  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_funcA

; 441  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 442  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 443  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 444  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 445  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 446  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 447  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 448  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64A ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc64
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc64
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc64 PROC				; COMDAT

; 426  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 427  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open64_file_func

; 428  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 429  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 430  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell64_file_func

; 431  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek64_file_func

; 432  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 433  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 434  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 435  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc64 ENDP
_TEXT	ENDS
PUBLIC	_fill_win32_filefunc
; Function compile flags: /Ogtp
;	COMDAT _fill_win32_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_win32_filefunc PROC				; COMDAT

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _win32_open_file_func

; 416  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET _win32_read_file_func

; 417  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], OFFSET _win32_write_file_func

; 418  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  0001a	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _win32_tell_file_func

; 419  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00021	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], OFFSET _win32_seek_file_func

; 420  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], OFFSET _win32_close_file_func

; 421  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  0002f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _win32_error_file_func

; 422  :     pzlib_filefunc_def->opaque = NULL;

  00036	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 423  : }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_fill_win32_filefunc ENDP
END
